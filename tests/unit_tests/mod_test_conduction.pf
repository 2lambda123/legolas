module mod_test_conduction
  use mod_suite_utils
  use funit
  use mod_thermal_conduction, only: set_conduction_values
  use mod_equilibrium, only: rho_field, T_field, B_field, kappa_field
  use mod_global_variables, only: use_fixed_tc_para, fixed_tc_para_value, &
                                  use_fixed_tc_perp, fixed_tc_perp_value

contains

  @before
  subroutine init_test()
    call reset_globals()
    call reset_fields(init_fields=.true.)
    call reset_eigenfunctions(init_efs=.false.)
    call set_default_units()
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up()
  end subroutine teardown_test


  @test
  subroutine test_kappa_para_cte()
    write(*, *) "Testing thermal conduction: kappa parallel constant"
    use_fixed_tc_para = .true.
    fixed_tc_para_value = 1.0d0
    use_fixed_tc_perp = .true.
    fixed_tc_perp_value = 0.0d0
    call set_conduction_values(rho_field, T_field, B_field, kappa_field)

    @assertEqual(fixed_tc_para_value, kappa_field % kappa_para(:), tolerance=TOL)
    @assertEqual(0.0d0, kappa_field % kappa_perp(:), tolerance=TOL)
    @assertEqual(0.0d0, kappa_field % d_kappa_perp_drho(:), tolerance=TOL)
    @assertEqual(0.0d0, kappa_field % d_kappa_perp_dB2(:), tolerance=TOL)
    @assertEqual(0.0d0, kappa_field % d_kappa_perp_dT(:), tolerance=TOL)
  end subroutine test_kappa_para_cte


  @test
  subroutine test_kappa_perp_cte()
    write(*, *) "Testing thermal conduction: kappa perpendicular constant"
    use_fixed_tc_para = .true.
    fixed_tc_para_value = 0.0d0
    use_fixed_tc_perp = .true.
    fixed_tc_perp_value = 1.0d0
    call set_conduction_values(rho_field, T_field, B_field, kappa_field)

    @assertEqual(fixed_tc_perp_value, kappa_field % kappa_perp(:), tolerance=TOL)
    @assertEqual(0.0d0, kappa_field % kappa_para(:), tolerance=TOL)
    @assertEqual(0.0d0, kappa_field % d_kappa_perp_drho(:), tolerance=TOL)
    @assertEqual(0.0d0, kappa_field % d_kappa_perp_dB2(:), tolerance=TOL)
    @assertEqual(0.0d0, kappa_field % d_kappa_perp_dT(:), tolerance=TOL)
  end subroutine test_kappa_perp_cte


  @test
  subroutine test_kappa_para()
    use mod_global_variables, only: set_gridpts
    use mod_units, only: unit_conduction

    real(dp)  :: kappavals(4)

    write(*, *) "Testing thermal conduction: kappa parallel varying"
    call set_gridpts(2)
    call reset_fields(init_fields=.true.)
    T_field % T0 = [0.5d0, 1.0d0, 1.5d0, 3.0d0]
    kappavals = [1.44635478d8, 8.18181818d8, 2.25464397d9, 1.27541923d10] / unit_conduction
    use_fixed_tc_perp = .true.
    fixed_tc_perp_value = 0.0d0
    call set_conduction_values(rho_field, T_field, B_field, kappa_field)

    @assertEqual(kappavals, kappa_field % kappa_para, tolerance=1.0d-8)
    @assertEqual(0.0d0, kappa_field % kappa_perp, tolerance=TOL)
  end subroutine test_kappa_para


  @test
  subroutine test_kappa_perp()
    use mod_global_variables, only: set_gridpts
    use mod_units, only: unit_conduction, unit_dtc_dT, unit_dtc_drho, unit_dtc_dB2

    real(dp)  :: kappavals(4), dkappadTvals(4), dkappadB2vals(4), dkappadrhovals(4)

    write(*, *) "Testing thermal conduction: kappa perpendicular varying"
    call set_gridpts(2)
    call reset_fields(init_fields=.true.)
    T_field % T0 = [0.5d0, 1.0d0, 1.5d0, 3.0d0]
    rho_field % rho0 = [0.8d0, 0.9d0, 1.0d0, 1.5d0]
    B_field % B0 = [2.0d0, 5.0d0, 8.0d0, 10.0d0]
    kappavals = [601.44584699,  86.12050348,  33.91063688,  34.52895546] / unit_conduction
    dkappadTvals = [-6.01445847d-04, -4.30602517d-05, -1.13035456d-05, -5.75482591d-06] / unit_dtc_dT
    dkappadrhovals = [1.05109091d-07, 1.33782031d-08, 4.74099702d-09, 3.21829549d-09] / unit_dtc_drho
    dkappadB2vals = [-6.01445847d0, -0.13779281d0, -0.02119415d0, -0.01381158d0] / unit_dtc_dB2
    use_fixed_tc_para = .true.
    fixed_tc_para_value = 0.0d0
    call set_conduction_values(rho_field, T_field, B_field, kappa_field)

    @assertEqual(kappavals, kappa_field % kappa_perp, tolerance=1.0d-8)
    @assertEqual(dkappadrhovals, kappa_field % d_kappa_perp_drho, tolerance=1.0d-8)
    @assertEqual(dkappadB2vals, kappa_field % d_kappa_perp_dB2, tolerance=1.0d-8)
    @assertEqual(dkappadTvals, kappa_field % d_kappa_perp_dT, tolerance=1.0d-8)
    @assertEqual(0.0d0, kappa_field % kappa_para, tolerance=TOL)
  end subroutine test_kappa_perp

end module mod_test_conduction
