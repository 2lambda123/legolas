module mod_test_inspections
  use mod_suite_utils
  use funit
  use mod_equilibrium, only: grav_field
  use mod_inspections, only: check_wavenumbers
  use mod_equilibrium_params, only: k2, k3
  use mod_global_variables, only: NaN
  implicit none

  type(settings_t) :: settings
  type(background_t) :: background

contains

  @before
  subroutine init_test()
    call reset_globals()
    settings = get_settings()
    background = get_background()
    call create_test_grid(settings)
    call reset_fields(settings, init_fields=.true.)
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up(settings)
    call settings%delete()
    call background%delete()
  end subroutine teardown_test


  real(dp) function uniform()
    uniform = random_uniform(-1.0d0, 1.0d0)
  end function uniform


  real(dp) function uniform_nan()
    real(dp) :: x
    x = random_uniform(-1.0d0, 1.0d0)
    if (x < 0.0d0) then
      uniform_nan = NaN
    else
      uniform_nan = x
    end if
  end function uniform_nan


  subroutine do_checks()
    use mod_inspections, only: perform_NaN_and_negative_checks
    call perform_NaN_and_negative_checks(background, grav_field)
  end subroutine do_checks


  @test
  subroutine test_density_negative()
    call set_name("negative density")
    call background%set_density_funcs(rho0_func=uniform)
    call do_checks()
    @assertExceptionRaised("negative density encountered!")
  end subroutine test_density_negative


  @test
  subroutine test_temperature_negative()
    call set_name("negative temperature")
    call background%set_temperature_funcs(T0_func=uniform)
    call do_checks()
    @assertExceptionRaised("negative temperature encountered!")
  end subroutine test_temperature_negative


  @test
  subroutine test_density_nan()
    call set_name("density NaN")
    call background%set_density_funcs(rho0_func=uniform_nan)
    call do_checks()
    @assertExceptionRaised("NaN encountered in density")
  end subroutine test_density_nan


  @test
  subroutine test_temperature_nan()
    call set_name("temperature NaN")
    call background%set_temperature_funcs(T0_func=uniform_nan)
    call do_checks()
    @assertExceptionRaised("NaN encountered in temperature")
  end subroutine test_temperature_nan


  @test
  subroutine test_b01_nan()
    call set_name("component B01 NaN")
    call background%set_magnetic_1_funcs(B01_func=uniform_nan)
    call do_checks()
    @assertExceptionRaised("NaN encountered in B01")
  end subroutine test_b01_nan


  @test
  subroutine test_b02_nan()
    call set_name("component B02 NaN")
    call background%set_magnetic_2_funcs(B02_func=uniform_nan)
    call do_checks()
    @assertExceptionRaised("NaN encountered in B02")
  end subroutine test_b02_nan


  @test
  subroutine test_b03_nan()
    call set_name("component B03 NaN")
    call background%set_magnetic_3_funcs(B03_func=uniform_nan)
    call do_checks()
    @assertExceptionRaised("NaN encountered in B03")
  end subroutine test_b03_nan


  @test
  subroutine test_v01_nan()
    call set_name("component v01 NaN")
    call background%set_velocity_1_funcs(v01_func=uniform_nan)
    call do_checks()
    @assertExceptionRaised("NaN encountered in v01")
  end subroutine test_v01_nan


  @test
  subroutine test_v02_nan()
    call set_name("component v02 NaN")
    call background%set_velocity_2_funcs(v02_func=uniform_nan)
    call do_checks()
    @assertExceptionRaised("NaN encountered in v02")
  end subroutine test_v02_nan


  @test
  subroutine test_v03_nan()
    call set_name("component v03 NaN")
    call background%set_velocity_3_funcs(v03_func=uniform_nan)
    call do_checks()
    @assertExceptionRaised("NaN encountered in v03")
  end subroutine test_v03_nan


  @test
  subroutine test_gravity_nan()
    call set_name("gravity NaN")
    grav_field % grav = NaN
    call do_checks()
    @assertExceptionRaised("NaN encountered in gravity")
  end subroutine test_gravity_nan


  @test
  subroutine test_invalid_k2()
    character(len=100) :: error_msg
    call set_name("wavenumber k2 non-int in cylindrical")
    call settings%grid%set_geometry("cylindrical")
    k2 = 1.2d0
    call check_wavenumbers(settings%grid%get_geometry())
    error_msg = "cylindrical geometry but k2 is not an integer! Value: 1.20000000"
    @assertExceptionRaised(error_msg)
  end subroutine test_invalid_k2


  @test
  subroutine test_integer_k2()
    call set_name("wavenumber k2 cylindrical")
    call settings%grid%set_geometry("cylindrical")
    k2 = 2.0d0
    call check_wavenumbers(settings%grid%get_geometry())
    @assertEqual(2.0d0, k2, tolerance=TOL)
  end subroutine test_integer_k2


  @test
  subroutine test_k2_cartesian()
    call set_name("wavenumber k2 Cartesian")
    k2 = 0.5d0
    call check_wavenumbers(settings%grid%get_geometry())
    @assertEqual(0.5d0, k2, tolerance=TOL)
  end subroutine test_k2_cartesian

end module mod_test_inspections
