module mod_test_linear_systems
  use mod_suite_utils
  use funit
  use mod_linear_systems, only: solve_linear_system_complex_banded
  use mod_banded_matrix, only: banded_matrix_t
  use mod_transform_matrix, only: array_to_banded
  implicit none

  type(banded_matrix_t) :: bandmatrix
  complex(dp), parameter :: bvector(8) = [ &
    1.0d0, 2.0d0, 3.0d0, 4.0d0, 5.0d0, 6.0d0, 7.0d0, 8.0d0 &
  ] * (1.0d0, 1.0d0)
  complex(dp) :: actual(8)
  ! complex(dp), parameter :: array(8, 8) = reshape( &

  ! )

contains

  @before
  subroutine init_test()
    actual = (0.0d0, 0.0d0)
  end subroutine init_test


  @after
  subroutine tear_down()
    call bandmatrix%destroy()
  end subroutine tear_down


  @test
  subroutine test_solve_linear_real_identity_matrix()
    integer :: i
    complex(dp) :: idmat(8, 8)

    call set_name("solve linear system: real identity matrix")
    idmat = (0.0d0, 0.0d0)
    do i = 1, 8
      idmat(i, i) = (1.0d0, 0.0d0)
    end do
    call array_to_banded(array=idmat, subdiags=0, superdiags=0, banded=bandmatrix)
    actual = solve_linear_system_complex_banded(bandmatrix, bvector)
    @assertEqual(bvector, actual, tolerance=TOL)
  end subroutine test_solve_linear_real_identity_matrix


  @test
  subroutine test_solve_linear_pure_complex_identity_matrix()
    integer :: i
    complex(dp) :: idmat(8, 8)

    call set_name("solve linear system: pure complex identity matrix")
    idmat = (0.0d0, 0.0d0)
    do i = 1, 8
      idmat(i, i) = (0.0d0, 1.0d0)
    end do
    call array_to_banded(array=idmat, subdiags=0, superdiags=0, banded=bandmatrix)
    actual = solve_linear_system_complex_banded(bandmatrix, bvector)
    ! should return complex conjugate of B-vector
    @assertEqual(conjg(bvector), actual, tolerance=TOL)
  end subroutine test_solve_linear_pure_complex_identity_matrix


  @test
  subroutine test_solve_linear_complex_identity_matrix()
    integer :: i
    complex(dp) :: idmat(8, 8), expected(8)

    call set_name("solve linear system: complex identity matrix")
    idmat = (0.0d0, 0.0d0)
    do i = 1, 8
      idmat(i, i) = (1.0d0, 1.0d0)
      expected(i) = cmplx(i, 0.0d0, kind=dp)
    end do
    call array_to_banded(array=idmat, subdiags=0, superdiags=0, banded=bandmatrix)
    actual = solve_linear_system_complex_banded(bandmatrix, bvector)
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_solve_linear_complex_identity_matrix

end module mod_test_linear_systems
