module mod_test_units
  use funit
  use mod_suite_utils
  use mod_units
  implicit none

contains

  @before
  subroutine init_test()
    call reset_globals()
    call reset_fields(init_fields=.true.)
    call reset_eigenfunctions(init_efs=.false.)
    call set_default_units()
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up()
  end subroutine teardown_test


  @test
  subroutine set_units_rho_temp()
    call set_name("setting density & temperature units")
    call set_normalisations( &
      new_unit_temperature=1.0d6, &
      new_unit_magneticfield=5.0d0, &
      new_unit_length=1.0d10, &
      new_unit_density=1.0d-12 &
    )
    @assertExceptionRaised("unit density and unit temperature can not both be set.")
  end subroutine set_units_rho_temp


  @test
  subroutine set_units_no_rho_no_temp()
    call set_name("setting units without rho or temperature")
    call set_normalisations(new_unit_magneticfield=5.0d0, new_unit_length=1.0d10)
    @assertExceptionRaised("no unit density or unit temperature specified.")
  end subroutine set_units_no_rho_no_temp


  @test
  subroutine test_units()
    call set_name("setting units")
    call set_normalisations( &
      new_unit_temperature=1.0d6, &
      new_unit_magneticfield=5.0d0, &
      new_unit_length=1.0d10 &
    )
    @assertEqual(5.0d0, unit_magneticfield, tolerance=TOL)
    @assertEqual(1.0d10, unit_length, tolerance=TOL)
    @assertEqual(1.9894367886486917d0, unit_pressure, tolerance=TOL)
    @assertEqual(1.0d6, unit_temperature, tolerance=TOL)
    @assertEqual(2.4101533254935998d0, unit_density * 1.0d14, tolerance=TOL)
    @assertEqual(14409434091.049740d0, unit_numberdensity, tolerance=TOL)
    @assertEqual(9085372.4661753811d0, unit_velocity, tolerance=TOL)
    @assertEqual(1100.6703398489997d0, unit_time, tolerance=TOL)
    @assertEqual(8.7052055713759540d0, unit_lambdaT * 1.0d24, tolerance=TOL)
    @assertEqual(8.7052055713759540d0, unit_dlambdaT_dT * 1.0d30, tolerance=TOL)
    @assertEqual(180747742227.85196d0, unit_conduction, tolerance=TOL)
  end subroutine test_units

  @test
  subroutine test_unit_resistivity()
    use mod_equilibrium, only: T_field, eta_field
    use mod_resistivity, only: set_resistivity_values

    call set_name("setting unit resistivity")
    T_field % T0 = 1.0d0
    ! at 1 MK normalised resistivity should be 0.1
    call set_resistivity_values(T_field, eta_field)
    @assertEqual(0.1d0, eta_field % eta(:), tolerance=TOL)
  end subroutine test_unit_resistivity


  @test
  subroutine test_if_normalisations_set()
    call set_name("check if normalisations set")
    call check_if_normalisations_set()
    @assertTrue(normalisations_are_set)
  end subroutine test_if_normalisations_set
end module mod_test_units
