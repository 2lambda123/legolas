module mod_test_matrix_structure
  use mod_suite_utils
  use funit
  use mod_matrix_structure, only: matrix_t, new_matrix
  implicit none

  real(dp)  :: rmat(4, 4) = reshape( &
    [ &
      3.0d0, 0.0d0, -1.0d0, 0.0d0, & ! column 1
      0.0d0, 1.0d0, 0.0d0, 0.0d0, & ! column 2
      7.0d0, 0.0d0, 2.0d0, -1.0d0, & ! column 3
      -1.0d0, 5.0d0, 8.0d0, 4.0d0 & ! column 4
    ], &
    shape=[4, 4] &
  )

  type(matrix_t) :: matrix

contains

  @before
  subroutine init_test()
    call reset_globals()
    matrix = new_matrix(nb_rows=5)
  end subroutine init_test


  @after
  subroutine tear_down()
    call matrix%delete_matrix()
  end subroutine tear_down


  @test
  subroutine test_init_matrix()
    call set_name("matrix datastructure: initialisation")
    @assertEqual(5, size(matrix%rows))
    @assertEqual(5, matrix%matrix_dim)
  end subroutine test_init_matrix


  @test
  subroutine test_add_single_real_element()
    call set_name("matrix datastructure: add real")
    @assertEqual(0, matrix%rows(1)%nb_elements)
    call matrix%add_element(row=1, column=1, element=1.0d0)
    @assertEqual(1, matrix%rows(1)%nb_elements)
    @assertTrue(associated(matrix%rows(1)%head))
  end subroutine test_add_single_real_element


  @test
  subroutine test_add_single_complex_element()
    call set_name("matrix datastructure: add complex")
    @assertEqual(0, matrix%rows(2)%nb_elements)
    call matrix%add_element(row=2, column=3, element=(2.0d0, 1.0d0))
    @assertEqual(1, matrix%rows(2)%nb_elements)
    @assertTrue(associated(matrix%rows(2)%head))
  end subroutine test_add_single_complex_element


  @test
  subroutine test_add_element_invalid_row()
    call set_name("matrix datastructure: invalid row")
    call matrix%add_element(row=0, column=3, element=1.0d0)
    @assertExceptionRaised("row/column index 0 is outside of matrix dimension")
    call matrix%add_element(row=6, column=2, element=1.0d0)
    @assertExceptionRaised("row/column index 6 is outside of matrix dimension")
  end subroutine test_add_element_invalid_row


  @test
  subroutine test_add_element_invalid_column()
    call set_name("matrix datastructure: invalid column")
    call matrix%add_element(row=1, column=0, element=1.0d0)
    @assertExceptionRaised("row/column index 0 is outside of matrix dimension")
    call matrix%add_element(row=2, column=7, element=1.0d0)
    @assertExceptionRaised("row/column index 7 is outside of matrix dimension")
  end subroutine test_add_element_invalid_column


  @test
  subroutine test_add_zero_real_element()
    call set_name("matrix datastructure: add real zero")
    call matrix%add_element(row=1, column=1, element=0.0d0)
    @assertEqual(0, matrix%rows(1)%nb_elements)
    @assertFalse(associated(matrix%rows(1)%head))
  end subroutine test_add_zero_real_element


  @test
  subroutine test_add_zero_complex_element()
    call set_name("matrix datastructure: add complex zero")
    call matrix%add_element(row=1, column=1, element=(0.0d0, 0.0d0))
    @assertEqual(0, matrix%rows(1)%nb_elements)
    @assertFalse(associated(matrix%rows(1)%head))
  end subroutine test_add_zero_complex_element


  @test
  subroutine test_add_element_invalid_type()
    call set_name("matrix datastructure: add invalid type")
    call matrix%add_element(row=2, column=1, element=1)
    @assertExceptionRaised("adding unexpected element type")
  end subroutine test_add_element_invalid_type


  @test
  subroutine test_get_single_real_element()
    real(dp) :: element
    call set_name("matrix datastructure: get single real element")
    call matrix%add_element(row=1, column=2, element=(2.0d0))
    call matrix%get_element(row=1, column=2, element=element)
    @assertEqual(2.0d0, element, tolerance=TOL)
  end subroutine test_get_single_real_element


  @test
  subroutine test_get_real_element_not_present()
    real(dp) :: element
    call set_name("matrix datastructure: get real not present")
    call matrix%get_element(row=1, column=2, element=element)
    @assertExceptionRaised("node with column index 2 was not found")
  end subroutine test_get_real_element_not_present


  @test
  subroutine test_get_real_element_invalid_type()
    real(dp) :: element
    call set_name("matrix datastructure: get real invalid type")
    call matrix%add_element(row=1, column=3, element=(1.0d0, 2.0d0))
    call matrix%get_element(row=1, column=3, element=element)
    @assertExceptionRaised("node element does not have type real")
  end subroutine test_get_real_element_invalid_type


  @test
  subroutine test_add_real_multiple_rows()
    integer :: i
    real(dp) :: element
    call set_name("matrix datastructure: add multiple rows (real)")
    do i = 1, 5
      element = i * 2.0d0 - 6.0d0
      call matrix%add_element(row=i, column=2, element=element)
    end do
    call matrix%get_element(row=1, column=2, element=element)
    @assertEqual(-4.0d0, element, tolerance=TOL)
    call matrix%get_element(row=2, column=2, element=element)
    @assertEqual(-2.0d0, element, tolerance=TOL)
    call matrix%get_element(row=4, column=2, element=element)
    @assertEqual(2.0d0, element, tolerance=TOL)
    call matrix%get_element(row=5, column=2, element=element)
    @assertEqual(4.0d0, element, tolerance=TOL)

    call matrix%get_element(row=3, column=2, element=element)
    @assertExceptionRaised("node with column index 2 was not found")
  end subroutine test_add_real_multiple_rows


  @test
  subroutine test_add_real_multiple_columns()
    integer :: i
    real(dp) :: element
    call set_name("matrix datastructure: add multiple columns (real)")
    do i = 1, 5
      element = 3.5d0 * i
      call matrix%add_element(row=3, column=i, element=element)
    end do
    do i = 1, 5
      call matrix%get_element(row=3, column=i, element=element)
      @assertEqual(3.5d0 * i, element, tolerance=TOL)
    end do
  end subroutine test_add_real_multiple_columns

end module mod_test_matrix_structure