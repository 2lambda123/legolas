module mod_test_input
  use funit
  use mod_suite_utils
  use mod_input, only: read_parfile
  implicit none

contains

  @before
  subroutine init_test()
    call reset_globals()
    call reset_fields(init_fields=.true.)
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up()
  end subroutine teardown_test


  @test
  subroutine test_no_parfile_given()
    call set_name("no parfile given")
    call read_parfile(parfile="")
    @assertExceptionRaised("no parfile supplied!")
  end subroutine test_no_parfile_given


  @test
  subroutine test_parfile_gridpoints()
    use mod_global_variables, only: gridpts

    call set_name("setting gridpoints through parfile")
    call read_parfile("test_parfiles/parfile_gridpts.par")
    @assertEqual(100, gridpts)
  end subroutine test_parfile_gridpoints


  @test
  subroutine test_parfile_gamma()
    use mod_global_variables, only: gamma, gamma_1

    call set_name("setting gamma through parfile")
    call read_parfile("test_parfiles/parfile_gamma.par")
    @assertEqual(2.0d0, gamma, tolerance=TOL)
    @assertEqual(1.0d0, gamma_1, tolerance=TOL)
  end subroutine test_parfile_gamma


  @test
  subroutine test_parfile_dryrun()
    use mod_global_variables, only: write_eigenfunctions, write_matrices

    call set_name("setting dry run flag")
    call read_parfile("test_parfiles/parfile_dryrun.par")
    @assertFalse(write_eigenfunctions)
    @assertFalse(write_matrices)
  end subroutine test_parfile_dryrun


  @test
  subroutine test_parfile_doubleunits()
    character(len=125) :: error_msg

    call set_name("setting rho + T unit in parfile")
    call read_parfile("test_parfiles/parfile_doubleunits.par")
    error_msg = ( &
      "unit density and unit temperature cannot both be provided in the parfile!" &
    )
    @assertExceptionRaised(trim(error_msg))
  end subroutine test_parfile_doubleunits


  @test
  subroutine test_parfile_onlyrhounit()
    character(len=125) :: error_msg

    call set_name("setting only rho unit in parfile")
    call read_parfile("test_parfiles/parfile_onlyrhounit.par")
    error_msg = "unit_density found, unit_magneticfield and unit_length also required."
    @assertExceptionRaised(error_msg)
  end subroutine test_parfile_onlyrhounit


  @test
  subroutine test_parfile_onlyTunit()
    character(len=125) :: error_msg

    call set_name("setting only T unit in parfile")
    call read_parfile("test_parfiles/parfile_onlytempunit.par")
    error_msg = ( &
      "unit_temperature found, unit_magneticfield and unit_length also required." &
    )
    @assertExceptionRaised(error_msg)
  end subroutine test_parfile_onlyTunit


  @test
  subroutine test_parfile_units_rho()
    use mod_units, only: unit_density, unit_magneticfield, unit_length
    use mod_global_variables, only: cgs_units

    call set_name("setting units through parfile (rho)")
    call read_parfile("test_parfiles/parfile_units_rho.par")
    @assertTrue(cgs_units)
    @assertEqual(unit_density, 1.0d-15, tolerance=TOL)
    @assertEqual(unit_magneticfield, 10.0d0, tolerance=TOL)
    @assertEqual(unit_length, 1.0d9, tolerance=TOL)
  end subroutine test_parfile_units_rho


  @test
  subroutine test_parfile_units_temp()
    use mod_units, only: unit_temperature, unit_magneticfield, unit_length
    use mod_global_variables, only: cgs_units

    call set_name("setting units through parfile (T)")
    call read_parfile("test_parfiles/parfile_units_temp.par")
    @assertTrue(cgs_units)
    @assertEqual(unit_temperature, 1.0d7, tolerance=TOL)
    @assertEqual(unit_magneticfield, 10.0d0, tolerance=TOL)
    @assertEqual(unit_length, 1.0d9, tolerance=TOL)
  end subroutine test_parfile_units_temp

end module mod_test_input
