module mod_test_input
  use funit
  use mod_suite_utils
  use mod_input, only: read_parfile
  implicit none

  character(len=50) :: parfile

contains

  @before
  subroutine init_test()
    call reset_globals()
    call reset_fields(init_fields=.true.)
    call reset_eigenfunctions(init_efs=.false.)
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up()
  end subroutine teardown_test


  @test
  subroutine test_pf_gridpts()
    use mod_global_variables, only: gridpts

    write(*, *) "Testing parfile setting of gridpoints"
    parfile = "test_parfiles/parfile_gridpts.par"
    call read_parfile(trim(parfile))
    @assertEqual(gridpts, 100)
  end subroutine test_pf_gridpts


  @test
  subroutine test_pf_gamma()
    use mod_global_variables, only: gamma, gamma_1

    write(*, *) "Testing parfile setting of gamma"
    parfile = "test_parfiles/parfile_gamma.par"
    call read_parfile(trim(parfile))
    @assertEqual(gamma, 2.0d0, tolerance=TOL)
    @assertEqual(gamma_1, 1.0d0, tolerance=TOL)
  end subroutine test_pf_gamma


  @test
  subroutine test_pf_doubleunits()
    write(*, *) "Testing parfile setting of units: rho + T"
    parfile = "test_parfiles/parfile_doubleunits.par"
    call read_parfile(trim(parfile))

    @assertExceptionRaised("unit density and unit temperature can not both be provided in the par file!")
  end subroutine test_pf_doubleunits


  @test
  subroutine test_pf_onlyrhounit()
    write(*, *) "Testing parfile setting of units: only rho"
    parfile = "test_parfiles/parfile_onlyrhounit.par"
    call read_parfile(trim(parfile))

    @assertExceptionRaised("unit_density found, but unit_magneticfield and unit_length are also required.")
  end subroutine test_pf_onlyrhounit


  @test
  subroutine test_pf_onlytempunit()
    write(*, *) "Testing parfile setting of units: only T"
    parfile = "test_parfiles/parfile_onlytempunit.par"
    call read_parfile(trim(parfile))

    @assertExceptionRaised("unit_temperature found, but unit_magneticfield and unit_length are also required.")
  end subroutine test_pf_onlytempunit


  @test
  subroutine test_pf_units_rho()
    use mod_units, only: unit_density, unit_magneticfield, unit_length

    write(*, *) "Testing parfile setting of units: rho + others"
    parfile = "test_parfiles/parfile_units_rho.par"
    call read_parfile(trim(parfile))

    @assertEqual(unit_density, 1.0d-15, tolerance=TOL)
    @assertEqual(unit_magneticfield, 10.0d0, tolerance=TOL)
    @assertEqual(unit_length, 1.0d9, tolerance=TOL)
  end subroutine test_pf_units_rho


  @test
  subroutine test_pf_units_temp()
    use mod_units, only: unit_temperature, unit_magneticfield, unit_length

    write(*, *) "Testing parfile setting of units: T + others"
    parfile = "test_parfiles/parfile_units_temp.par"
    call read_parfile(trim(parfile))

    @assertEqual(unit_temperature, 1.0d7, tolerance=TOL)
    @assertEqual(unit_magneticfield, 10.0d0, tolerance=TOL)
    @assertEqual(unit_length, 1.0d9, tolerance=TOL)
  end subroutine test_pf_units_temp


end module mod_test_input
