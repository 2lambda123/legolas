module mod_test_matrix_structure_complex
  use mod_suite_utils
  use funit
  use mod_matrix_structure, only: matrix_t, new_matrix
  implicit none

  type(matrix_t) :: matrix

contains

  @before
  subroutine init_test()
    call reset_globals()
    matrix = new_matrix(nb_rows=5)
  end subroutine init_test


  @after
  subroutine tear_down()
    call matrix%delete_matrix()
  end subroutine tear_down


  @test
  subroutine test_add_single_complex_element()
    call set_name("matrix datastructure: add complex")
    @assertEqual(0, matrix%rows(2)%nb_elements)
    call matrix%add_element(row=2, column=3, element=(2.0d0, 1.0d0))
    @assertEqual(1, matrix%rows(2)%nb_elements)
    @assertTrue(associated(matrix%rows(2)%head))
  end subroutine test_add_single_complex_element


  @test
  subroutine test_add_complex_element_invalid_row()
    call set_name("matrix datastructure: invalid row (complex)")
    call matrix%add_element(row=0, column=3, element=(1.0d0, 0.0d0))
    @assertExceptionRaised("row/column index 0 is outside of matrix dimension")
    call matrix%add_element(row=6, column=2, element=(1.0d0, 0.0d0))
    @assertExceptionRaised("row/column index 6 is outside of matrix dimension")
  end subroutine test_add_complex_element_invalid_row


  @test
  subroutine test_add_complex_element_invalid_column()
    call set_name("matrix datastructure: invalid column (complex)")
    call matrix%add_element(row=1, column=0, element=(1.0d0, 1.0d0))
    @assertExceptionRaised("row/column index 0 is outside of matrix dimension")
    call matrix%add_element(row=2, column=7, element=(1.0d0, 1.0d0))
    @assertExceptionRaised("row/column index 7 is outside of matrix dimension")
  end subroutine test_add_complex_element_invalid_column


  @test
  subroutine test_add_zero_complex_element()
    call set_name("matrix datastructure: add complex zero")
    call matrix%add_element(row=1, column=1, element=(0.0d0, 0.0d0))
    @assertEqual(0, matrix%rows(1)%nb_elements)
    @assertFalse(associated(matrix%rows(1)%head))
  end subroutine test_add_zero_complex_element


  @test
  subroutine test_get_single_complex_element()
    complex(dp) :: element
    call set_name("matrix datastructure: get single complex element")
    call matrix%add_element(row=1, column=2, element=(2.0d0, 1.0d0))
    call matrix%get_element(row=1, column=2, element=element)
    @assertEqual((2.0d0, 1.0d0), element, tolerance=TOL)
  end subroutine test_get_single_complex_element


  @test
  subroutine test_get_complex_element_not_present()
    complex(dp) :: element
    call set_name("matrix datastructure: get complex not present")
    call matrix%get_element(row=2, column=3, element=element)
    @assertExceptionRaised("node with column index 3 does not exist")
  end subroutine test_get_complex_element_not_present


  @test
  subroutine test_get_complex_element_invalid_type()
    complex(dp) :: element
    call set_name("matrix datastructure: get complex invalid type")
    call matrix%add_element(row=1, column=3, element=2.0d0)
    call matrix%get_element(row=1, column=3, element=element)
    @assertExceptionRaised("node element does not have type complex")
  end subroutine test_get_complex_element_invalid_type


  @test
  subroutine test_add_complex_multiple_rows()
    integer :: i
    complex(dp) :: element
    call set_name("matrix datastructure: add multiple rows (complex)")
    do i = 1, 5
      element = i * (2.0d0, 3.0d0) - (1.0d0, 6.0d0)
      call matrix%add_element(row=i, column=2, element=element)
    end do
    do i = 1, 5
      call matrix%get_element(row=i, column=2, element=element)
      @assertEqual(i * (2.0d0, 3.0d0) - (1.0d0, 6.0d0), element, tolerance=TOL)
    end do
  end subroutine test_add_complex_multiple_rows


  @test
  subroutine test_add_complex_multiple_columns()
    integer :: i
    complex(dp) :: element
    call set_name("matrix datastructure: add multiple columns (complex)")
    do i = 1, 5
      element = i * (2.2d0, -4.5d0)
      call matrix%add_element(row=3, column=i, element=element)
    end do
    do i = 1, 5
      call matrix%get_element(row=3, column=i, element=element)
      @assertEqual(i * (2.2d0, -4.5d0), element, tolerance=TOL)
    end do
  end subroutine test_add_complex_multiple_columns

end module mod_test_matrix_structure_complex