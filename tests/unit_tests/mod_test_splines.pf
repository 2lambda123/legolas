module mod_test_splines
  use mod_suite_utils
  use funit
  use mod_spline_functions
  implicit none

  real(dp)  :: spline_result(4), spline_expected(4)
  real(dp), parameter :: left = 1.0d0
  real(dp), parameter :: right = 2.0d0

contains

  @before
  subroutine init_test()
    call reset_globals()
    call reset_fields(init_fields=.false.)
    call reset_eigenfunctions(init_efs=.false.)
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up()
    spline_result = 0.0d0
    spline_expected = 0.0d0
  end subroutine teardown_test


  @test
  subroutine test_Q_spline()
    write(*, *) "Testing splines: quadratic"
    call quadratic_factors(1.2d0, left, right, spline_result)
    spline_expected = [0.64d0, 0.0d0, -0.12d0, 0.48d0]

    @assertEqual(spline_expected, spline_result, tolerance=TOL)
  end subroutine test_Q_spline


  @test
  subroutine test_dQ_spline()
    write(*, *) "Testing splines: derivative quadratic"
    call quadratic_factors_deriv(1.5d0, left, right, spline_result)
    spline_expected = [0.0d0, 0.0d0, 1.0d0, -1.0d0]

    @assertEqual(spline_expected, spline_result, tolerance=TOL)
  end subroutine test_dQ_spline


  @test
  subroutine test_C_spline()
    write(*, *) "Testing splines: cubic"
    call cubic_factors(1.7d0, left, right, spline_result)
    spline_expected = [0.784d0, 0.216d0, -0.147d0, 0.063d0]

    @assertEqual(spline_expected, spline_result, tolerance=TOL)
  end subroutine test_C_spline


  @test
  subroutine test_dC_spline()
    write(*, *) "Testing splines: derivative cubic"
    call cubic_factors_deriv(1.9d0, left, right, spline_result)
    spline_expected = [0.54d0, -0.54d0, 0.63d0, -0.17d0]

    @assertEqual(spline_expected, spline_result, tolerance=TOL)
  end subroutine test_dC_spline

end module mod_test_splines
