module mod_test_arpacksolvers
  use mod_suite_utils
  use funit
  use mod_solvers, only: solve_evp
  use mod_arpack_type, only: arpack_type
  use mod_global_variables, only: number_of_eigenvalues, arpack_mode, &
    which_eigenvalues, sigma
  implicit none

  type(arpack_type) :: arpackparams
  real(dp)  :: bmat(10, 10)
  real(dp)  :: EV_TOL = 1.0d-9
  complex(dp) :: amat(10, 10)
  complex(dp) :: vr(10, 10)
  complex(dp) :: eigenvals(5)
  !> eigenvalues for standard AX = wX, all obtained through scipy.sparse.linalg.
  complex(dp) :: expected_standard(10) = [ &
    (-7.88387658940d0, 4.1991444332407d0), & ! 1
    (-5.138261241954d0, 7.5009013739202d0), & ! 2
    (-1.8535519260158162d0, -2.3664867110999914d0), & ! 3
    (-1.1552554495101768d0, -0.035423895485982966d0), & ! 4
    (0.24267531391652103d0, 0.03073408215019738d0), & ! 5
    (0.31046578943724d0, -4.047463930579d0), & ! 6
    (0.7986174799734262d0, 3.1698016541082943d0), & ! 7
    (2.990390817288886d0, 0.9764506866571272d0), & ! 8
    (3.4487443020471886d0, 0.16816349496512467d0), & ! 9
    (5.2400515042190d0, -6.595821187876d0) & ! 10
  ]
  !> eigenvalues for general AX = wBX, all obtained through scipy.sparse.linalg
  complex(dp) :: expected_general(10) = [ &
    (-47.2665629010241d0, -53.44467400017329d0), & ! 1
    (-2.189909116110393d0, 2.5207526151739104d0), & ! 2
    (-0.1090874990971426d0, 0.07259700665954608d0), & ! 3
    (-0.09731865560338829d0, -0.07865430786985059d0), & ! 4
    (0.005806290449585147d0, -0.00571678567700864d0), & ! 5
    (0.07082410204964182d0, 0.17332751670248298d0), & ! 6
    (0.09148540813167974d0, -0.09425266599250161d0), & ! 7
    (0.18564017432800176d0, -0.018108179117325113d0), & ! 8
    (0.27674478315351964d0, -0.05805107198127579d0), & ! 9
    (3.255610316647699d0, -1.7224326867994835d0) & ! 10
  ]
  integer :: i, idxs(5)

contains

  @before
  subroutine init_test()
    use mod_global_variables, only: solver, maxiter

    vr = (0.0d0, 0.0d0)
    eigenvals = (0.0d0, 0.0d0)
    call set_matrices()
    solver = "arnoldi"
    number_of_eigenvalues = 5
    which_eigenvalues = "LM"
    maxiter = 0
  end subroutine init_test

  @after
  subroutine tear_down()
    call arpackparams % tear_down()
  end subroutine tear_down

  subroutine set_matrices()
    complex(dp), parameter :: ic = (0.0d0, 1.0d0)
    complex(dp), parameter :: ir = (1.0d0, 0.0d0)

    ! this matrix is symmetric and positive definite, as it should be
    bmat = reshape( &
      [ &
        9.0d0,  2.0d0,  8.0d0,  1.0d0,  2.0d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        2.0d0, 23.0d0, -4.0d0, -5.5d0,-10.0d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        8.0d0, -4.0d0, 15.0d0, -9.5d0, -3.0d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        1.0d0, -5.5d0, -9.5d0,60.25d0, -9.5d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        2.0d0,-10.0d0, -3.0d0, -9.5d0, 51.0d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0, 18.0d0, 11.0d0, 27.0d0, 4.0d0, 0.0d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0, 11.0d0, 14.0d0, 13.0d0, 3.0d0, 0.0d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0, 27.0d0, 13.0d0, 51.0d0, 5.5d0, 1.0d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0,  4.0d0,  3.0d0,  5.5d0,2.25d0, 3.5d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0,  1.0d0, 3.5d0, 10.0d0 &
      ], &
      shape=[10, 10] &
    )
    amat = reshape( &
      [ &
         1*ir, 2*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir, &
         2*ic, 1*ic, -1*ir,  0*ir,  0*ir,  0*ir,  0*ir,  2*ic,  0*ir,  0*ir, &
        -3*ir, 3*ir, -2*ic, -1*ic,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir, &
         0*ir, 5*ic,  4*ir, -3*ic, -1*ic,  2*ic,  0*ir,  0*ir,  0*ir,  0*ir, &
         1*ir, 0*ir,  2*ir,  2*ic,  3*ic, -7*ir,  1*ic, -3*ir,  0*ir,  0*ir, &
         0*ir, 0*ir,  3*ic,  4*ir,  5*ic, -3*ir, -1*ir, -5*ic,  2*ic,  0*ir, &
         0*ir, 0*ir,  0*ir,  3*ir, -5*ir, -1*ic,  4*ic,  7*ic,  2*ir,  1*ic, &
         0*ir, 0*ir,  0*ir,  0*ir,  6*ic,  0*ir, -7*ir, -3*ir,  1*ic, -2*ir, &
        -1*ir, 0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  1*ir, -3*ir,  5*ic, &
         0*ir, 0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  2*ic,  5*ir &
      ], &
      shape=[10, 10] &
    )
  end subroutine set_matrices


  @test
  subroutine test_arpack_invalid_nev()
    call set_name("arpack (invalid number_of_eigenvalues)")
    number_of_eigenvalues = -1
    call arpackparams % initialise(evpdim=10)
    @assertExceptionRaised("number_of_eigenvalues must be >= 0, but is equal to -1")
    call arpackparams % tear_down()

    number_of_eigenvalues = 12
    call arpackparams % initialise(evpdim=10)
    @assertExceptionRaised("number_of_eigenvalues larger than matrix size! (12 > 10)")
  end subroutine test_arpack_invalid_nev


  @test
  subroutine test_arpack_invalid_maxiter()
    use mod_global_variables, only: maxiter

    call set_name("arpack (invalid maxiter)")
    maxiter = -1
    call arpackparams % initialise(evpdim=10)
    @assertExceptionRaised("maxiter has to be positive, but is equal to -1")
  end subroutine test_arpack_invalid_maxiter


  @test
  subroutine test_arpack_invalid_which()
    call set_name("arpack (invalid which_eigenvalues")
    which_eigenvalues = "LL"
    call arpackparams % initialise(evpdim=10)
    @assertExceptionRaised("which_eigenvalues = LL is invalid")
  end subroutine test_arpack_invalid_which


  @test
  subroutine test_arpack_invalid_arpackmode()
    call set_name("arpack (invalid mode)")
    arpack_mode = "test_fail"
    call solve_evp(amat, bmat, eigenvals, vr)
    @assertExceptionRaised("unknown mode for ARPACK: test_fail")
  end subroutine test_arpack_invalid_arpackmode


  @test
  subroutine test_arpack_invalid_mode_nb()
    call set_name("arpack (invalid mode number)")
    call arpackparams % set_mode(0)
    @assertExceptionRaised("mode must be 1, 2 or 3 but mode = 0 was given")
    call arpackparams % set_mode(4)
    @assertExceptionRaised("mode must be 1, 2 or 3 but mode = 4 was given")
  end subroutine test_arpack_invalid_mode_nb


  @test
  subroutine test_arpack_invalid_sigma()
    call set_name("arpack (invalid sigma)")
    call arpackparams % set_sigma((0.0d0, 0.0d0))
    @assertExceptionRaised("ARPACK shift-invert: sigma can not be equal to zero")
  end subroutine test_arpack_invalid_sigma


  @test
  subroutine test_arpack_edge_sigma()
    call set_name("arpack (Re/Im sigma = 0)")
    ! should raise no errors
    call arpackparams % set_sigma((1.0d0, 0.0d0))
    call arpackparams % set_sigma((0.0d0, 1.0d0))
  end subroutine test_arpack_edge_sigma


  @test
  subroutine test_arpack_standard_LM()
    call set_name("arpack standard (AX = wX, LM eigenvalues)")
    call create_identity_matrix(ndim=10, mat=bmat)
    arpack_mode = "standard"
    which_eigenvalues = "LM"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 6, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_standard_LM


  @test
  subroutine test_arpack_standard_SM()
    call set_name("arpack standard (AX = wX, SM eigenvalues)")
    call create_identity_matrix(ndim=10, mat=bmat)
    arpack_mode = "standard"
    which_eigenvalues = "SM"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [3, 4, 5, 7, 8]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_standard_SM


  @test
  subroutine test_arpack_standard_LR()
    call set_name("arpack standard (AX = wX, LR eigenvalues)")
    call create_identity_matrix(ndim=10, mat=bmat)
    arpack_mode = "standard"
    which_eigenvalues = "LR"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [6, 7, 8, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_standard_LR


  @test
  subroutine test_arpack_standard_SR()
    call set_name("arpack standard (AX = wX, SR eigenvalues)")
    call create_identity_matrix(ndim=10, mat=bmat)
    arpack_mode = "standard"
    which_eigenvalues = "SR"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 3, 4, 5]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_standard_SR


  @test
  subroutine test_arpack_standard_LI()
    call set_name("arpack standard (AX = wX, LI eigenvalues)")
    call create_identity_matrix(ndim=10, mat=bmat)
    arpack_mode = "standard"
    which_eigenvalues = "LI"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 7, 8, 9]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_standard_LI


  @test
  subroutine test_arpack_standard_SI()
    call set_name("arpack standard (AX = wX, SI eigenvalues)")
    call create_identity_matrix(ndim=10, mat=bmat)
    arpack_mode = "standard"
    which_eigenvalues = "SI"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [3, 4, 5, 6, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_standard_SI


  @test
  subroutine test_arpack_general_LM
    call set_name("arpack general (AX = wBX, LM eigenvalues)")
    arpack_mode = "general"
    which_eigenvalues = "LM"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 6, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_general_LM


  @test
  subroutine test_arpack_general_SM
    call set_name("arpack general (AX = wBX, SM eigenvalues)")
    arpack_mode = "general"
    which_eigenvalues = "SM"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [3, 4, 5, 7, 8]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_general_SM


  @test
  subroutine test_arpack_general_LR
    call set_name("arpack general (AX = wBX, LR eigenvalues)")
    arpack_mode = "general"
    which_eigenvalues = "LR"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [6, 7, 8, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_general_LR


  @test
  subroutine test_arpack_general_SR
    call set_name("arpack general (AX = wBX, SR eigenvalues)")
    arpack_mode = "general"
    which_eigenvalues = "SR"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 3, 4, 5]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_general_SR


  @test
  subroutine test_arpack_general_LI
    call set_name("arpack general (AX = wBX, LI eigenvalues)")
    arpack_mode = "general"
    which_eigenvalues = "LI"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [2, 3, 5, 6, 8]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_general_LI


  @test
  subroutine test_arpack_general_SI
    call set_name("arpack general (AX = wBX, SI eigenvalues)")
    arpack_mode = "general"
    which_eigenvalues = "SI"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 4, 7, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_general_SI


  @test
  subroutine test_arpack_shift_standard_01_LM()
    call set_name("arpack standard (shift-invert, sigma=0.24+0.03i, LM eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.24d0, 0.03d0)
    which_eigenvalues = "LM"
    call create_identity_matrix(10, bmat)
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [3, 4, 5, 7, 8]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_standard_01_LM


  @test
  subroutine test_arpack_shift_standard_01_SM()
    call set_name("arpack standard (shift-invert, sigma=0.24+0.03i, SM eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.24d0, 0.03d0)
    which_eigenvalues = "SM"
    call create_identity_matrix(10, bmat)
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 6, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_standard_01_SM


  @test
  subroutine test_arpack_shift_standard_01_LR()
    call set_name("arpack standard (shift-invert, sigma=0.24+0.03i, LR eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.24d0, 0.03d0)
    which_eigenvalues = "LR"
    call create_identity_matrix(10, bmat)
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [5, 7, 8, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_standard_01_LR


  @test
  subroutine test_arpack_shift_standard_01_SR()
    call set_name("arpack standard (shift-invert, sigma=0.24+0.03i, SR eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.24d0, 0.03d0)
    which_eigenvalues = "SR"
    call create_identity_matrix(10, bmat)
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 3, 4, 6]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_standard_01_SR


  @test
  subroutine test_arpack_shift_standard_01_LI()
    call set_name("arpack standard (shift-invert, sigma=0.24+0.03i, LI eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.24d0, 0.03d0)
    which_eigenvalues = "LI"
    call create_identity_matrix(10, bmat)
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [3, 4, 6, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_standard_01_LI


  @test
  subroutine test_arpack_shift_standard_01_SI()
    call set_name("arpack standard (shift-invert, sigma=0.24+0.03i, SI eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.24d0, 0.03d0)
    which_eigenvalues = "SI"
    call create_identity_matrix(10, bmat)
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 5, 7, 8]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_standard_01_SI


  @test
  subroutine test_arpack_shift_standard_02_LM()
    call set_name("arpack standard (shift-invert, sigma=3.44+0.17i, LM eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (3.44d0, 0.17d0)
    which_eigenvalues = "LM"
    call create_identity_matrix(10, bmat)
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [4, 5, 7, 8, 9]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_standard_02_LM


  @test
  subroutine test_arpack_shift_standard_02_SM()
    call set_name("arpack standard (shift-invert, sigma=3.44+0.17i, SM eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (3.44d0, 0.17d0)
    which_eigenvalues = "SM"
    call create_identity_matrix(10, bmat)
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 3, 6, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_standard_02_SM


  @test
  subroutine test_arpack_shift_standard_02_LR()
    call set_name("arpack standard (shift-invert, sigma=3.44+0.17i, LR eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (3.44d0, 0.17d0)
    which_eigenvalues = "LR"
    call create_identity_matrix(10, bmat)
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 6, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_standard_02_LR


  @test
  subroutine test_arpack_shift_standard_02_SR()
    call set_name("arpack standard (shift-invert, sigma=3.44+0.17i, SR eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (3.44d0, 0.17d0)
    which_eigenvalues = "SR"
    call create_identity_matrix(10, bmat)
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [3, 4, 5, 7, 8]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_standard_02_SR


  @test
  subroutine test_arpack_shift_standard_02_LI()
    call set_name("arpack standard (shift-invert, sigma=3.44+0.17i, LI eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (3.44d0, 0.17d0)
    which_eigenvalues = "LI"
    call create_identity_matrix(10, bmat)
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [3, 5, 6, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_standard_02_LI


  @test
  subroutine test_arpack_shift_standard_02_SI()
    call set_name("arpack standard (shift-invert, sigma=3.44+0.17i, SI eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (3.44d0, 0.17d0)
    which_eigenvalues = "SI"
    call create_identity_matrix(10, bmat)
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 4, 7, 8]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_standard(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_standard_02_SI


  @test
  subroutine test_arpack_shift_general_01_LM()
    call set_name("arpack general (shift-invert, sigma=0.09-0.1i, LM eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.09d0, -0.1d0)
    which_eigenvalues = "LM"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [4, 5, 7, 8, 9]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_01_LM


  @test
  subroutine test_arpack_shift_general_01_SM()
    call set_name("arpack general (shift-invert, sigma=0.09-0.1i, SM eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.09d0, -0.1d0)
    which_eigenvalues = "SM"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 3, 6, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_01_SM


  @test
  subroutine test_arpack_shift_general_01_LR()
    call set_name("arpack general (shift-invert, sigma=0.09-0.1i, LR eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.09d0, -0.1d0)
    which_eigenvalues = "LR"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 7, 8, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_01_LR


  @test
  subroutine test_arpack_shift_general_01_SR()
    call set_name("arpack general (shift-invert, sigma=0.09-0.1i, SR eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.09d0, -0.1d0)
    which_eigenvalues = "SR"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [2, 3, 4, 5, 6]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_01_SR


  @test
  subroutine test_arpack_shift_general_01_LI()
    call set_name("arpack general (shift-invert, sigma=0.09-0.1i, LI eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.09d0, -0.1d0)
    which_eigenvalues = "LI"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 4, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_01_LI


  @test
  subroutine test_arpack_shift_general_01_SI()
    call set_name("arpack general (shift-invert, sigma=0.09-0.1i, SI eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.09d0, -0.1d0)
    which_eigenvalues = "SI"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [3, 5, 6, 7, 8]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_01_SI


  @test
  subroutine test_arpack_shift_general_02_LM()
    call set_name("arpack general (shift-invert, sigma=0.5i, LM eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.0d0, 0.5d0)
    which_eigenvalues = "LM"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [3, 4, 5, 6, 8]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_02_LM


  @test
  subroutine test_arpack_shift_general_02_SM()
    call set_name("arpack general (shift-invert, sigma=0.5i, SM eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.0d0, 0.5d0)
    which_eigenvalues = "SM"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 7, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_02_SM


  @test
  subroutine test_arpack_shift_general_02_LR()
    call set_name("arpack general (shift-invert, sigma=0.5i, LR eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.0d0, 0.5d0)
    which_eigenvalues = "LR"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [6, 7, 8, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_02_LR


  @test
  subroutine test_arpack_shift_general_02_SR()
    call set_name("arpack general (shift-invert, sigma=0.5i, SR eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.0d0, 0.5d0)
    which_eigenvalues = "SR"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 3, 4, 5]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_02_SR


  @test
  subroutine test_arpack_shift_general_02_LI()
    call set_name("arpack general (shift-invert, sigma=0.5i, LI eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.0d0, 0.5d0)
    which_eigenvalues = "LI"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [3, 4, 5, 6, 8]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_02_LI


  @test
  subroutine test_arpack_shift_general_02_SI()
    call set_name("arpack general (shift-invert, sigma=0.5i, SI eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (0.0d0, 0.5d0)
    which_eigenvalues = "SI"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 7, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_02_SI


  @test
  subroutine test_arpack_shift_general_03_LM()
    call set_name("arpack general (shift-invert, sigma=-2.0, LM eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (-2.0d0, 0.0d0)
    which_eigenvalues = "LM"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [3, 4, 5, 6, 7]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_03_LM


  @test
  subroutine test_arpack_shift_general_03_SM()
    call set_name("arpack general (shift-invert, sigma=-2.0, SM eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (-2.0d0, 0.0d0)
    which_eigenvalues = "SM"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 8, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_03_SM


  @test
  subroutine test_arpack_shift_general_03_LR()
    call set_name("arpack general (shift-invert, sigma=-2.0, LR eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (-2.0d0, 0.0d0)
    which_eigenvalues = "LR"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [3, 4, 5, 6, 7]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_03_LR


  @test
  subroutine test_arpack_shift_general_03_SR()
    call set_name("arpack general (shift-invert, sigma=-2.0, SR eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (-2.0d0, 0.0d0)
    which_eigenvalues = "SR"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 2, 8, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_03_SR


  @test
  subroutine test_arpack_shift_general_03_LI()
    call set_name("arpack general (shift-invert, sigma=-2.0, LI eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (-2.0d0, 0.0d0)
    which_eigenvalues = "LI"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [1, 4, 7, 9, 10]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_03_LI


  @test
  subroutine test_arpack_shift_general_03_SI()
    call set_name("arpack general (shift-invert, sigma=-2.0, SI eigenvalues)")
    arpack_mode = "shift-invert"
    sigma = (-2.0d0, 0.0d0)
    which_eigenvalues = "SI"
    call solve_evp(amat, bmat, eigenvals, vr)
    call sort_complex_array(eigenvals)
    idxs = [2, 3, 5, 6, 8]
    do i = 1, number_of_eigenvalues
      @assertEqual(expected_general(idxs(i)), eigenvals(i), tolerance=EV_TOL)
    end do
  end subroutine test_arpack_shift_general_03_SI

end module mod_test_arpacksolvers
