module mod_test_variables
  use mod_global_variables
  use mod_suite_utils
  use funit
  implicit none

contains


  @before
  subroutine init_test()
    call reset_globals()
  end subroutine init_test


  @after
  subroutine teardown_test()
    ! nothing to do
  end subroutine teardown_test


  @test
  subroutine test_gamma()
    call set_name("setting gamma")
    call set_gamma(5.0d0 / 3.0d0)
    @assertEqual(5.0d0 / 3.0d0, gamma, tolerance=TOL)
    @assertEqual(2.0d0 / 3.0d0, gamma_1, tolerance=TOL)
  end subroutine test_gamma


  @test
  subroutine test_gamma_incompressible()
    call set_name("setting incompressible")
    incompressible = .true.
    call set_gamma(1.0d0)
    @assertGreaterThan(gamma, 1.0d5)
  end subroutine test_gamma_incompressible


  @test
  subroutine test_gridpts()
    call set_name("setting gridpoints")
    call set_gridpts(11)
    @assertEqual(11, gridpts)
    @assertEqual(40, gauss_gridpts)
    @assertEqual(21, ef_gridpts)
  end subroutine test_gridpts


  @test
  subroutine test_matrix_properties_mhd()
    call set_name("matrix properties MHD")
    call set_gridpts(10)
    call set_matrix_properties()
    @assertEqual(8, size(state_vector))
    @assertEqual(16, dim_subblock)
    @assertEqual(32, dim_quadblock)
    @assertEqual(160, dim_matrix)
  end subroutine test_matrix_properties_mhd


  @test
  subroutine test_matrix_properties_mhd_selfg()
    call set_name("matrix properties (MHD + selfgravity)")
    call set_gridpts(10)
    selfgravity = .true.
    call set_matrix_properties()
    @assertEqual(9, size(state_vector))
    @assertEqual(18, dim_subblock)
    @assertEqual(36, dim_quadblock)
    @assertEqual(180, dim_matrix)
  end subroutine test_matrix_properties_mhd_selfg

end module mod_test_variables
