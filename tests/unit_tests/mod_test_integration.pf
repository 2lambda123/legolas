module mod_test_integration
  use funit
  use mod_suite_utils
  use mod_integration, only: integrate_ode_rk
  implicit none

  real(dp)  :: yinit
  real(dp), allocatable :: xvalues(:), yactual(:)
  real(dp), allocatable :: ax(:), bx(:)
  real(dp), allocatable :: xrkvalues(:), yexpect(:)

contains

  subroutine reset_arrays(pts)
    integer, intent(in) :: pts

    if (allocated(xvalues)) then
      deallocate(xvalues)
    end if
    if (allocated(yactual)) then
      deallocate(yactual)
    end if
    if (allocated(ax)) then
      deallocate(ax)
    end if
    if (allocated(bx)) then
      deallocate(bx)
    end if
    if (allocated(xrkvalues)) then
      deallocate(xrkvalues)
    end if
    if (allocated(yexpect)) then
      deallocate(yexpect)
    end if
    allocate(xvalues(pts))
    allocate(yactual(pts))
    allocate(ax(pts))
    allocate(bx(pts))
    allocate(xrkvalues(pts))
    allocate(yexpect(pts))
  end subroutine reset_arrays


  @test
  subroutine test_integration_simple()
    call set_name("integration (dy=x, x=[1, 3], y0=2)")
    call reset_arrays(5000)
    xvalues = linspace(1.0d0, 3.0d0, 5000)
    ax = 0.0d0
    bx = xvalues
    call integrate_ode_rk( &
      xvalues, ax, bx, 5000, yinit=2.0d0, yvalues=yactual, new_xvalues=xrkvalues &
    )
    yexpect = 0.5d0 * xvalues**2 + 1.5d0
    @assertEqual(size(xvalues), size(yactual))
    @assertEqual(xvalues, xrkvalues, tolerance=TOL)
    @assertEqual(yexpect(1), yactual(1), tolerance=TOL)
    @assertEqual(yexpect, yactual, tolerance=1.0d-8)
  end subroutine test_integration_simple


  @test
  subroutine test_integration_simple_adaptive()
    call set_name("integration (dy=x, x=[1, 3], y0=2, adaptive)")
    call reset_arrays(5000)
    xvalues = linspace(1.0d0, 3.0d0, 5000)
    ax = 0.0d0
    bx = xvalues
    call integrate_ode_rk( &
      xvalues, &
      ax, &
      bx, &
      5000, &
      yinit=2.0d0, &
      yvalues=yactual, &
      adaptive=.true., &
      new_xvalues=xrkvalues &
    )
    yexpect = 0.5d0 * xrkvalues**2 + 1.5d0
    @assertEqual(size(xvalues), size(yactual))
    @assertEqual(xvalues(1), xrkvalues(1), tolerance=TOL)
    @assertEqual(xvalues(5000), xrkvalues(5000), tolerance=TOL)
    @assertEqual(yexpect(1), yactual(1), tolerance=TOL)
    @assertEqual(yexpect, yactual, tolerance=1.0d-8)
  end subroutine test_integration_simple_adaptive


  @test
  subroutine test_integration_ode1()
    call set_name("integration (dy=x**3-xy, x=[0, 2], y0=0)")
    call reset_arrays(5000)
    xvalues = linspace(0.0d0, 2.0d0, 5000)
    ax = -xvalues
    bx = xvalues**3
    yinit = 0.0d0
    call integrate_ode_rk( &
      xvalues, ax, bx, 5000, yinit=0.0d0, yvalues=yactual, new_xvalues=xrkvalues &
    )
    yexpect = xvalues**2 - 2.0d0 + 2.0d0 * exp(-0.5d0 * xvalues**2)
    @assertEqual(size(xvalues), size(yactual))
    @assertEqual(xvalues, xrkvalues, tolerance=TOL)
    @assertEqual(yexpect(1), yactual(1), tolerance=TOL)
    @assertEqual(yexpect, yactual, tolerance=1.0d-7)
  end subroutine test_integration_ode1


  @test
  subroutine test_integration_ode1_adaptive()
    call set_name("integration (dy=x**3-xy, x=[0, 2], y0=0, adaptive)")
    call reset_arrays(5000)
    xvalues = linspace(0.0d0, 2.0d0, 5000)
    ax = -xvalues
    bx = xvalues**3
    yinit = 0.0d0
    call integrate_ode_rk( &
      xvalues, &
      ax, &
      bx, &
      5000, &
      yinit=0.0d0, &
      yvalues=yactual, &
      adaptive=.true., &
      new_xvalues=xrkvalues &
    )
    yexpect = xrkvalues**2 - 2.0d0 + 2.0d0 * exp(-0.5d0 * xrkvalues**2)
    @assertEqual(size(xvalues), size(yactual))
    @assertEqual(xvalues(1), xrkvalues(1), tolerance=TOL)
    @assertEqual(xvalues(5000), xrkvalues(5000), tolerance=TOL)
    @assertEqual(yexpect(1), yactual(1), tolerance=TOL)
    @assertEqual(yexpect, yactual, tolerance=1.0d-7)
  end subroutine test_integration_ode1_adaptive


  @test
  subroutine test_integration_ode1_resample()
    call set_name("integration (dy=x**3-xy, x=[0, 2], y0=0, resampling)")
    call reset_arrays(5000)
    xvalues = linspace(0.0d0, 2.0d0, 5000)
    ax = -xvalues
    bx = xvalues**3
    yinit = 0.0d0
    ! integration will resample from 5000 to 10000 points
    deallocate(yactual, xrkvalues, yexpect)
    allocate(yactual(10000), xrkvalues(10000), yexpect(10000))
    call integrate_ode_rk( &
      xvalues, ax, bx, 10000, yinit=0.0d0, yvalues=yactual, new_xvalues=xrkvalues &
    )
    yexpect = xrkvalues**2 - 2.0d0 + 2.0d0 * exp(-0.5d0 * xrkvalues**2)
    @assertEqual(5000, size(xvalues))
    @assertEqual(xvalues(1), xrkvalues(1), tolerance=TOL)
    @assertEqual(xvalues(5000), xrkvalues(10000), tolerance=TOL)
    @assertEqual(yexpect(1), yactual(1), tolerance=TOL)
    @assertEqual(yexpect, yactual, tolerance=1.0d-7)
  end subroutine test_integration_ode1_resample


  @test
  subroutine test_integration_ode2()
    call set_name("integration (dy=-cos(x)y+2x*exp(-sin(x), x=[-2, 3], y0=0)")
    call reset_arrays(5000)
    xvalues = linspace(-2.0d0, 3.0d0, 5000)
    ax = -cos(xvalues)
    bx = 2.0d0 * xvalues * exp(-sin(xvalues))
    call integrate_ode_rk( &
      xvalues, ax, bx, 5000, yinit=0.0d0, yvalues=yactual, new_xvalues=xrkvalues &
    )
    yexpect = (xvalues**2 - 4.0d0) * exp(-sin(xvalues))
    @assertEqual(size(xvalues), size(yactual))
    @assertEqual(xvalues, xrkvalues, tolerance=TOL)
    @assertEqual(yexpect(1), yactual(1), tolerance=TOL)
    @assertEqual(yexpect, yactual, tolerance=5.0d-6)
  end subroutine test_integration_ode2


  @test
  subroutine test_integration_ode2_adaptive()
    call set_name("integration (dy=-cos(x)y+2x*exp(-sin(x), x=[-2, 3], y0=0, adaptive)")
    call reset_arrays(5000)
    xvalues = linspace(-2.0d0, 3.0d0, 5000)
    ax = -cos(xvalues)
    bx = 2.0d0 * xvalues * exp(-sin(xvalues))
    call integrate_ode_rk( &
      xvalues, &
      ax, &
      bx, &
      5000, &
      yinit=0.0d0, &
      yvalues=yactual, &
      adaptive=.true., &
      new_xvalues=xrkvalues &
    )
    yexpect = (xvalues**2 - 4.0d0) * exp(-sin(xvalues))
    @assertEqual(size(xvalues), size(yactual))
    @assertEqual(xvalues(1), xrkvalues(1), tolerance=TOL)
    @assertEqual(xvalues(5000), xrkvalues(5000), tolerance=TOL)
    @assertEqual(yexpect(1), yactual(1), tolerance=TOL)
    @assertEqual(yexpect, yactual, tolerance=5.0d-6)
  end subroutine test_integration_ode2_adaptive

end module mod_test_integration
