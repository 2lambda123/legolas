module mod_test_resistivity
  use mod_suite_utils
  use funit
  use mod_resistivity, only: set_resistivity_values
  use mod_equilibrium, only: eta_field
  use mod_physical_constants
  implicit none

  real(dp) :: unit_resistivity, unit_temperature, unit_deta_dT
  type(settings_t) :: settings
  type(background_t) :: background
  real(dp), allocatable :: expected(:), actual(:)
  real(dp), allocatable :: temps(:)

contains

  @before
  subroutine init_test()
    settings = get_settings()
    background = get_background()
    call reset_fields(settings, init_fields=.true.)
    call set_default_units(settings)
    call create_test_grid( &
      settings, pts=settings%grid%get_gridpts(), geometry="Cartesian" &
    )
    unit_resistivity = settings%units%get_unit_resistivity()
    unit_temperature = settings%units%get_unit_temperature()
    unit_deta_dT = unit_resistivity / unit_temperature
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up(settings)
    call settings%delete()
    call background%delete()
    if (allocated(expected)) deallocate(expected)
    if (allocated(actual)) deallocate(actual)
    if (allocated(temps)) deallocate(temps)
  end subroutine teardown_test


  real(dp) function T0_x(x)
    real(dp), intent(in) :: x
    T0_x = temps(get_grid_idx(x))
  end function T0_x


  function get_spitzer_eta(T0vals) result(spitzer_eta)
    real(dp), intent(in) :: T0vals(:)
    real(dp), allocatable :: spitzer_eta(:)

    allocate(spitzer_eta(size(T0vals)))
    spitzer_eta = ( &
      (4.0d0 / 3.0d0) &
      * sqrt(2.0d0 * dpi) &
      * Z_ion &
      * ec_cgs**2 &
      * sqrt(me_cgs) &
      * coulomb_log &
      / (kB_cgs * T0vals * unit_temperature)**(3.0d0 / 2.0d0) &
    ) / settings%units%get_unit_resistivity()
  end function get_spitzer_eta


  function get_spitzer_deta_dT(T0vals) result(spitzer_deta)
    real(dp), intent(in) :: T0vals(:)
    real(dp), allocatable :: spitzer_deta(:)

    allocate(spitzer_deta(size(T0vals)))
    spitzer_deta = ( &
      -2.0d0 &
      * sqrt(2.0d0 * dpi) &
      * Z_ion &
      * ec_cgs**2 &
      * sqrt(me_cgs) &
      * coulomb_log &
      / (kB_cgs**(3.0d0 / 2.0d0) * (T0vals * unit_temperature)**(5.0d0 / 2.0d0)) &
    ) / unit_deta_dT
  end function get_spitzer_deta_dT


  @test
  subroutine test_set_eta_cte()
    call set_name("setting constant resistivity")
    call settings%physics%enable_resistivity(fixed_resistivity_value=2.0_dp)
    call set_resistivity_values(settings, background, eta_field)
    @assertTrue(settings%physics%resistivity%is_enabled())
    @assertTrue(settings%physics%resistivity%has_fixed_resistivity())
    @assertEqual(2.0_dp, eta_field % eta, tolerance=TOL)
    @assertEqual(0.0d0, eta_field % d_eta_dT, tolerance=TOL)
    @assertEqual(0.0d0, eta_field % d_eta_dr, tolerance=TOL)
  end subroutine test_set_eta_cte



  @test
  subroutine test_set_eta_cte_zero()
    call set_name("setting constant resistivity but zero")
    call settings%physics%enable_resistivity(fixed_resistivity_value=0.0_dp)
    @assertTrue(settings%physics%resistivity%is_enabled())
    @assertFalse(settings%physics%resistivity%has_fixed_resistivity())
  end subroutine test_set_eta_cte_zero


  @test
  subroutine test_set_eta()
    call set_name("setting varying resistivity")
    temps = linspace(1.0d-5, 3.5d0, settings%grid%get_gauss_gridpts())
    call settings%physics%enable_resistivity()
    call background%set_temperature_funcs(T0_func=T0_x)
    call set_resistivity_values(settings, background, eta_field)

    ! test resistivity
    expected = get_spitzer_eta(temps) * 1.0d30
    actual = eta_field%eta * 1.0d30
    @assertEqual(expected, actual, tolerance=TOL)

    ! test deta/dT
    expected = get_spitzer_deta_dT(temps) * 1.0d30
    actual = eta_field%d_eta_dT * 1.0d30
    @assertEqual(expected, actual, tolerance=TOL)

    ! test deta/dr
    @assertEqual(0.0d0, eta_field%d_eta_dr, tolerance=TOL)
  end subroutine test_set_eta


  @test
  subroutine test_set_dropoff_eta_fail()
    call set_name("setting eta dropoff (not constant)")
    allocate(temps(settings%grid%get_gauss_gridpts()), source=1.0d0)
    call settings%physics%enable_resistivity()
    settings%physics%resistivity%use_dropoff = .true.
    call background%set_temperature_funcs(T0_func=T0_x)
    call set_resistivity_values(settings, background, eta_field)

    @assertExceptionRaised("eta dropoff only possible with a fixed resistivity value")
  end subroutine test_set_dropoff_eta_fail


  @test
  subroutine test_set_dropoff_eta()
    integer :: middle, gauss_gridpts

    call set_name("setting eta dropoff (constant)")
    call settings%physics%enable_resistivity(fixed_resistivity_value=1.0_dp)
    temps = linspace(1.0d0, 2.0d0, settings%grid%get_gauss_gridpts())
    call background%set_temperature_funcs(T0_func=T0_x)
    settings%physics%resistivity%use_dropoff = .true.
    settings%physics%dropoff_edge_dist = 0.05
    settings%physics%dropoff_width = 0.1
    call set_resistivity_values(settings, background, eta_field)
    gauss_gridpts = settings%grid%get_gauss_gridpts()
    middle = int(gauss_gridpts / 2)

    @assertEqual(0.0d0, eta_field % eta(1), tolerance=TOL)
    @assertEqual(1.0_dp, eta_field % eta(middle), tolerance=TOL)
    @assertEqual(0.0d0, eta_field % eta(gauss_gridpts), tolerance=TOL)
    @assertEqual(0.0d0, eta_field % d_eta_dT, tolerance=TOL)

    @assertEqual(0.0d0, eta_field % d_eta_dr(1), tolerance=TOL)
    @assertEqual(0.0d0, eta_field % d_eta_dr(gauss_gridpts), tolerance=TOL)
    @assertEqual(0.0d0, eta_field % d_eta_dr(middle), tolerance=TOL)
  end subroutine test_set_dropoff_eta

end module mod_test_resistivity
