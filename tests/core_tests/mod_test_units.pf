module mod_test_units
  use funit
  use mod_suite_utils
  use mod_units, only: set_normalisations

contains

  @before
  subroutine init_test()
    call reset_globals()
    call reset_fields(init_fields=.true.)
    call reset_eigenfunctions(init_efs=.false.)
    call set_default_units()
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up()
  end subroutine teardown_test


  @test
  subroutine set_units_rho_temp()
    write(*, *) "Testing unit setting: rho + T"
    call set_normalisations(new_unit_temperature=1.0d6, &
                            new_unit_magneticfield=5.0d0, &
                            new_unit_length=1.0d10, &
                            new_unit_density=1.0d-12)
    @assertExceptionRaised("unit density and unit temperature can not both be set.")
  end subroutine set_units_rho_temp


  @test
  subroutine set_units_no_rho_no_temp()
    write(*, *) "Testing unit setting: no rho or T"
    call set_normalisations(new_unit_magneticfield=5.0d0, &
                            new_unit_length=1.0d10)
    @assertExceptionRaised("no unit density or unit temperature specified.")
  end subroutine set_units_no_rho_no_temp


  @test
  subroutine test_unit_magneticfield()
    use mod_units, only: unit_magneticfield

    write(*, *) "Testing unit magnetic field"
    @assertEqual(5.0d0, unit_magneticfield, tolerance=TOL)
  end subroutine test_unit_magneticfield


  @test
  subroutine test_unit_length()
    use mod_units, only: unit_length

    write(*, *) "Testing unit length"
    @assertEqual(1.0d10, unit_length, tolerance=TOL)
  end subroutine test_unit_length


  @test
  subroutine test_unit_pressure()
    use mod_units, only: unit_pressure

    write(*, *) "Testing unit pressure"
    @assertEqual(1.9894367886486917d0, unit_pressure, tolerance=TOL)
  end subroutine test_unit_pressure


  @test
  subroutine test_unit_temperature()
    use mod_units, only: unit_temperature

    write(*, *) "Testing unit temperature"
    @assertEqual(1.0d6, unit_temperature, tolerance=TOL)
  end subroutine test_unit_temperature


  @test
  subroutine test_unit_density()
    use mod_units, only: unit_density

    write(*, *) "Testing unit density"
    @assertEqual(2.4101533254935998d0, unit_density * 1.0d14, tolerance=TOL)
  end subroutine test_unit_density


  @test
  subroutine test_unit_numberdensity()
    use mod_units, only: unit_numberdensity

    write(*, *) "Testing unit numberdensity"
    @assertEqual(14409434091.049740d0, unit_numberdensity, tolerance=TOL)
  end subroutine test_unit_numberdensity


  @test
  subroutine test_unit_velocity()
    use mod_units, only: unit_velocity

    write(*, *) "Testing unit velocity"
    @assertEqual(9085372.4661753811d0, unit_velocity, tolerance=TOL)
  end subroutine test_unit_velocity


  @test
  subroutine test_unit_time()
    use mod_units, only: unit_time

    write(*, *) "Testing unit time"
    @assertEqual(1100.6703398489997d0, unit_time, tolerance=TOL)
  end subroutine test_unit_time


  @test
  subroutine test_unit_lambdaT()
    use mod_units, only: unit_lambdaT

    write(*, *) "Testing unit lambda(T)"
    @assertEqual(8.7052055713759540d0, unit_lambdaT * 1.0d24, tolerance=TOL)
  end subroutine test_unit_lambdaT


  @test
  subroutine test_unit_dlambdaT_dT()
    use mod_units, only: unit_dlambdaT_dT

    write(*, *) "Testing unit dlambda(T)/dT"
    @assertEqual(8.7052055713759540d0, unit_dlambdaT_dT * 1.0d30, tolerance=TOL)
  end subroutine test_unit_dlambdaT_dT


  @test
  subroutine test_unit_conduction()
    use mod_units, only: unit_conduction

    write(*, *) "Testing unit conduction"
    @assertEqual(180747742227.85196d0, unit_conduction, tolerance=TOL)
  end subroutine test_unit_conduction


  @test
  subroutine test_unit_resistivity()
    use mod_equilibrium, only: T_field, eta_field
    use mod_resistivity, only: set_resistivity_values

    write(*, *) "Testing unit resistivity"
    T_field % T0 = 1.0d0
    ! at 1 MK normalised resistivity should be 0.1
    call set_resistivity_values(T_field, eta_field)
    @assertEqual(0.1d0, eta_field % eta(:), tolerance=TOL)
  end subroutine test_unit_resistivity

end module mod_test_units
