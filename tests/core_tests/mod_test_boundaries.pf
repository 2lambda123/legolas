module mod_test_boundaries
  use mod_suite_utils
  use funit
  use mod_equilibrium, only: set_equilibrium
  use mod_global_variables, only: matrix_gridpts
  use mod_boundary_conditions, only: apply_boundary_conditions
  implicit none

  complex(dp), allocatable :: matA(:, :), matA_expect(:, :)
  real(dp), allocatable :: matB(:, :), matB_expect(:, :)

contains

  @before
  subroutine init_test()
    call reset_globals()
    call reset_fields(init_fields=.true.)
    call reset_eigenfunctions(init_efs=.false.)
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up()
  end subroutine teardown_test


  subroutine reset_matrices(bvals, avals)
    use mod_global_variables, only: dim_quadblock, dim_subblock, gridpts

    real(dp), intent(in), optional    :: bvals
    complex(dp), intent(in), optional :: avals
    real(dp)    :: blockb(dim_quadblock, dim_quadblock)
    complex(dp) :: blocka(dim_quadblock, dim_quadblock)
    integer :: p, i, j, blockidx, idx1, idx2

    if (allocated(matA)) then
      deallocate(matA)
    end if
    if (allocated(matA_expect)) then
      deallocate(matA_expect)
    end if
    if (allocated(matB)) then
      deallocate(matB)
    end if
    if (allocated(matB_expect)) then
      deallocate(matB_expect)
    end if
    allocate(matA(matrix_gridpts, matrix_gridpts))
    allocate(matA_expect(matrix_gridpts, matrix_gridpts))
    allocate(matB(matrix_gridpts, matrix_gridpts))
    allocate(matB_expect(matrix_gridpts, matrix_gridpts))
    ! fill matrices
    blockb = bvals
    blocka = avals
    blockidx = 0
    do p = 1, gridpts-1
      do j = 1, dim_quadblock
        do i = 1, dim_quadblock
          idx1 = i + blockidx
          idx2 = j + blockidx
          matB(idx1, idx2) = blockb(i, j)
          matB_expect(idx1, idx2) = blockb(i, j)
          matA(idx1, idx2) = blocka(i, j)
          matA_expect(idx1, idx2) = blocka(i, j)
        end do
      end do
      blockidx = blockidx + dim_subblock
    end do
  end subroutine reset_matrices


  @test
  subroutine test_bcs_cart_wall_B()
    integer     :: zero_idxs(5), idxs(6)
    integer     :: i, j

    write(*, *) "Testing boundaries B-matrix: fixed wall Cartesian"
    call reset_matrices(bvals=5.0d0, avals=(0.0d0, 0.0d0))
    call create_test_grid(pts=31, geom='Cartesian')
    call apply_boundary_conditions(matA, matB)

    ! zero contributions from the quadratic basis functions
    zero_idxs = [1, 5, 7, 9, 11]
    do i = 1, size(zero_idxs)
      j = zero_idxs(i)
      matB_expect(j, j) = 1.0d0
    end do
    ! left + right boundary conditions
    idxs = [3, 13, 15, 483, 493, 495]
    do i = 1, size(idxs)
      j = idxs(i)
      matB_expect(j, :) = 0.0d0
      matB_expect(:, j) = 0.0d0
      matB_expect(j, j) = 1.0d0
    end do
    @assertEqual(matB_expect, matB, tolerance=TOL)
  end subroutine test_bcs_cart_wall_B


  @test
  subroutine test_bcs_cyl_wall_B()
    integer     :: zero_idxs(5), idxs(6)
    integer     :: i, j

    write(*, *) "Testing boundaries B-matrix: fixed wall cylindrical"
    call reset_matrices(bvals=5.0d0, avals=(0.0d0, 0.0d0))
    call create_test_grid(pts=31, geom='cylindrical')
    call apply_boundary_conditions(matA, matB)

    ! zero contributions from the quadratic basis functions
    zero_idxs = [1, 5, 7, 9, 11]
    do i = 1, size(zero_idxs)
      j = zero_idxs(i)
      matB_expect(j, j) = 1.0d0
    end do
    ! left + right boundary conditions
    idxs = [3, 13, 15, 483, 493, 495]
    do i = 1, size(idxs)
      j = idxs(i)
      matB_expect(j, :) = 0.0d0
      matB_expect(:, j) = 0.0d0
      matB_expect(j, j) = 1.0d0
    end do
    @assertEqual(matB_expect, matB, tolerance=TOL)
  end subroutine test_bcs_cyl_wall_B


  @test
  subroutine test_bcs_cart_wall_A()
    integer     :: zero_idxs(5), idxs(6)
    integer     :: i, j

    write(*, *) "Testing boundaries A-matrix: fixed wall Cartesian"
    call reset_matrices(bvals=0.0d0, avals=(1.0d0, 2.0d0))
    call create_test_grid(pts=31, geom='Cartesian')
    call apply_boundary_conditions(matA, matB)

    ! zero contributions from the quadratic basis functions
    zero_idxs = [1, 5, 7, 9, 11]
    do i = 1, size(zero_idxs)
      j = zero_idxs(i)
      matA_expect(j, j) = (1.0d20, 0.0d0)
    end do
    ! left + right boundary conditions
    idxs = [3, 13, 15, 483, 493, 495]
    do i = 1, size(idxs)
      j = idxs(i)
      matA_expect(j, :) = (0.0d0, 0.0d0)
      matA_expect(:, j) = (0.0d0, 0.0d0)
      matA_expect(j, j) = (1.0d20, 0.0d0)
    end do
    @assertEqual(matA_expect, matA, tolerance=TOL)
  end subroutine test_bcs_cart_wall_A


  @test
  subroutine test_bcs_cyl_wall_A()
    integer     :: zero_idxs(5), idxs(6)
    integer     :: i, j

    write(*, *) "Testing boundaries A-matrix: fixed wall cylindrical"
    call reset_matrices(bvals=0.0d0, avals=(1.0d0, 2.0d0))
    call create_test_grid(pts=31, geom='cylindrical')
    call apply_boundary_conditions(matA, matB)

    ! zero contributions from the quadratic basis functions
    zero_idxs = [1, 5, 7, 9, 11]
    do i = 1, size(zero_idxs)
      j = zero_idxs(i)
      matA_expect(j, j) = (1.0d20, 0.0d0)
    end do
    ! left + right boundary conditions
    idxs = [3, 13, 15, 483, 493, 495]
    do i = 1, size(idxs)
      j = idxs(i)
      matA_expect(j, :) = (0.0d0, 0.0d0)
      matA_expect(:, j) = (0.0d0, 0.0d0)
      matA_expect(j, j) = (1.0d20, 0.0d0)
    end do
    @assertEqual(matA_expect, matA, tolerance=TOL)
  end subroutine test_bcs_cyl_wall_A


  @test
  subroutine test_bcs_cart_wall_A_kappa()
    use mod_equilibrium, only: kappa_field
    use mod_global_variables, only: thermal_conduction

    integer     :: zero_idxs(5), idxs(8)
    integer     :: i, j

    write(*, *) "Testing boundaries A-matrix: fixed wall Cartesian + conduction"
    thermal_conduction = .true.
    kappa_field % kappa_perp = 1.0d0
    call reset_matrices(bvals=0.0d0, avals=(1.0d0, 2.0d0))
    call create_test_grid(pts=31, geom='Cartesian')
    call apply_boundary_conditions(matA, matB)

    ! zero contributions from the quadratic basis functions
    zero_idxs = [1, 5, 7, 9, 11]
    do i = 1, size(zero_idxs)
      j = zero_idxs(i)
      matA_expect(j, j) = (1.0d20, 0.0d0)
    end do
    ! left + right boundary conditions
    idxs = [3, 10, 13, 15, 483, 490, 493, 495]
    do i = 1, size(idxs)
      j = idxs(i)
      matA_expect(j, :) = (0.0d0, 0.0d0)
      matA_expect(:, j) = (0.0d0, 0.0d0)
      matA_expect(j, j) = (1.0d20, 0.0d0)
    end do
    @assertEqual(matA_expect, matA, tolerance=TOL)
  end subroutine test_bcs_cart_wall_A_kappa


  @test
  subroutine test_bcs_cyl_wall_A_kappa()
    use mod_equilibrium, only: kappa_field
    use mod_global_variables, only: thermal_conduction

    integer     :: zero_idxs(5), idxs(8)
    integer     :: i, j

    write(*, *) "Testing boundaries A-matrix: fixed wall cylindrical + conduction"
    thermal_conduction = .true.
    kappa_field % kappa_perp = 1.0d0
    call reset_matrices(bvals=0.0d0, avals=(1.0d0, 2.0d0))
    call create_test_grid(pts=31, geom='cylindrical')
    call apply_boundary_conditions(matA, matB)

    ! zero contributions from the quadratic basis functions
    zero_idxs = [1, 5, 7, 9, 11]
    do i = 1, size(zero_idxs)
      j = zero_idxs(i)
      matA_expect(j, j) = (1.0d20, 0.0d0)
    end do
    ! left + right boundary conditions
    idxs = [3, 10, 13, 15, 483, 490, 493, 495]
    do i = 1, size(idxs)
      j = idxs(i)
      matA_expect(j, :) = (0.0d0, 0.0d0)
      matA_expect(:, j) = (0.0d0, 0.0d0)
      matA_expect(j, j) = (1.0d20, 0.0d0)
    end do
    @assertEqual(matA_expect, matA, tolerance=TOL)
  end subroutine test_bcs_cyl_wall_A_kappa

end module mod_test_boundaries
