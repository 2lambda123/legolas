module mod_test_arpacksolvers
  use mod_suite_utils
  use funit
  use mod_solvers, only: solve_evp
  use mod_arpack_type, only: arpack_type
  use mod_global_variables, only: ir, ic, number_of_eigenvalues, arpack_mode, &
    which_eigenvalues
  implicit none

  type(arpack_type)         :: arpackparams
  complex(dp), allocatable  :: amat(:, :)
  real(dp), allocatable     :: bmat(:, :)
  complex(dp), allocatable  :: vl(:, :), vr(:, :)
  complex(dp), allocatable  :: eigenvals(:)
  complex(dp), allocatable  :: expected(:, :)
  real(dp)  :: custom_tol

  character(2)  :: which_to_test(6) = ["LM", "SM", "LR", "SR", "LI", "SI"]

contains


  subroutine reset_arrays(ndim)
    integer, intent(in) :: ndim

    if (allocated(amat)) then
      deallocate(amat)
    end if
    allocate(amat(ndim, ndim))
    if (allocated(bmat)) then
      deallocate(bmat)
    end if
    allocate(bmat(ndim, ndim))
    if (allocated(vl)) then
      deallocate(vl)
    end if
    allocate(vl(ndim, ndim))
    if (allocated(vr)) then
      deallocate(vr)
    end if
    allocate(vr(ndim, ndim))
    if (allocated(eigenvals)) then
      deallocate(eigenvals)
    end if
    allocate(eigenvals(number_of_eigenvalues))
    if (allocated(expected)) then
      deallocate(expected)
    end if
    allocate(expected(size(which_to_test), number_of_eigenvalues))
    expected = (0.0d0, 0.0d0)
  end subroutine reset_arrays


  @before
  subroutine init_test()
    use mod_global_variables, only: solver, maxiter

    call reset_globals()
    call reset_fields(init_fields=.true.)
    call reset_eigenfunctions(init_efs=.false.)
    solver = "arnoldi"
    ! default maxiter=10*N is too low in some cases
    maxiter = 2000
    number_of_eigenvalues = 4
    call reset_arrays(ndim=10)
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up()
    call arpackparams % tear_down()
  end subroutine teardown_test


  @test
  subroutine test_arpack_bad_nev()
    write(*, *) "Testing ARPACK: invalid number_of_eigenvalues"
    number_of_eigenvalues = -1
    call arpackparams % initialise(evpdim=10)
    @assertExceptionRaised("number_of_eigenvalues must be >= 0, but is equal to -1")
    call arpackparams % tear_down()

    number_of_eigenvalues = 12
    call arpackparams % initialise(evpdim=10)
    @assertExceptionRaised("number_of_eigenvalues larger than matrix size! (12 > 10)")
  end subroutine test_arpack_bad_nev


  @test
  subroutine test_arpack_bad_maxiter()
    use mod_global_variables, only: maxiter

    write(*, *) "Testing ARPACK: invalid maxiter"
    maxiter = -1
    call arpackparams % initialise(evpdim=10)
    @assertExceptionRaised("maxiter has to be positive, but is equal to -1")
  end subroutine test_arpack_bad_maxiter


  @test
  subroutine test_arpack_bad_which()
    write(*, *) "Testing ARPACK: invalid which_eigenvalues"
    which_eigenvalues = "LL"
    call arpackparams % initialise(evpdim=10)
    @assertExceptionRaised("which_eigenvalues = LL is invalid")
  end subroutine test_arpack_bad_which


  @test
  subroutine test_arpack_bad_arpackmode()
    write(*, *) "Testing ARPACK: invalid arpack_mode"
    arpack_mode = "test_fail"
    call solve_evp(amat, bmat, eigenvals, vl, vr)
    @assertExceptionRaised("unknown mode for ARPACK: test_fail")
  end subroutine test_arpack_bad_arpackmode


  @test
  subroutine test_arpack_bad_mode_nb()
    write(*, *) "Testing ARPACK: invalid mode number"
    call arpackparams % set_mode(0)
    @assertExceptionRaised("mode must be 1, 2 or 3 but mode = 0 was given")
    call arpackparams % set_mode(4)
    @assertExceptionRaised("mode must be 1, 2 or 3 but mode = 4 was given")
  end subroutine test_arpack_bad_mode_nb


  @test
  subroutine test_arpack_bad_sigma()
    write(*, *) "Testing ARPACK: invalid sigma"
    call arpackparams % set_sigma((0.0d0, 0.0d0))
    @assertExceptionRaised("ARPACK shift-invert: sigma can not be equal to zero")
  end subroutine test_arpack_bad_sigma


  @test
  subroutine test_arpack_edge_sigma()
    write(*, *) "Testing ARPACK: Re/Im sigma = 0"
    ! should raise no errors
    call arpackparams % set_sigma((1.0d0, 0.0d0))
    call arpackparams % set_sigma((0.0d0, 1.0d0))
  end subroutine test_arpack_edge_sigma


  @test
  subroutine test_arpack_standard()
    use mod_solvers, only: solvers_clean

    integer   :: i

    write(*, *) "Testing ARPACK: Ax = wx"
    arpack_mode = "standard"
    amat = reshape( &
      (/ &
         1*ir, 2*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir, &
         2*ic, 1*ic, -1*ir,  0*ir,  0*ir,  0*ir,  0*ir,  2*ic,  0*ir,  0*ir, &
        -3*ir, 3*ir, -2*ic, -1*ic,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir, &
         0*ir, 5*ic,  4*ir, -3*ic, -1*ic,  2*ic,  0*ir,  0*ir,  0*ir,  0*ir, &
         1*ir, 0*ir,  2*ir,  2*ic,  3*ic, -7*ir,  1*ic, -3*ir,  0*ir,  0*ir, &
         0*ir, 0*ir,  3*ic,  4*ir,  5*ic, -3*ir, -1*ir, -5*ic,  2*ic,  0*ir, &
         0*ir, 0*ir,  0*ir,  3*ir, -5*ir, -1*ic,  4*ic,  7*ic,  2*ir,  1*ic, &
         0*ir, 0*ir,  0*ir,  0*ir,  6*ic,  0*ir, -7*ir, -3*ir,  1*ic, -2*ir, &
        -1*ir, 0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  1*ir, -3*ir,  5*ic, &
         0*ir, 0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  2*ic,  5*ir &
      /), &
      shape(amat) &
    )
    call create_identity_matrix(ndim=10, mat=bmat)
    ! fill expected values, all solutions are obtained through scipy.sparse.linalg.eigs
    ! mode = "LM"
    expected(1, :) = (/ &
      (-7.88387658940d0, 4.1991444332407d0), &
      (-5.138261241954d0, 7.5009013739202d0), &
      (0.31046578943724d0, -4.047463930579d0), &
      (5.2400515042190d0, -6.595821187876d0) &
    /)
    ! mode = "SM"
    expected(2, :) = (/ &
      (-1.8535519260158162d0, -2.3664867110999914d0), &
      (-1.1552554495101768d0, -0.035423895485982966d0), &
      (0.24267531391652103d0, 0.03073408215019738d0), &
      (2.990390817288886d0, 0.9764506866571272d0) &
    /)
    ! mode = "LR"
    expected(3, :) = (/ &
      (0.7986174799734262d0, 3.1698016541082943d0), &
      (2.990390817288887d0, 0.9764506866571241d0), &
      (3.4487443020471886d0, 0.16816349496512467d0), &
      (5.24005150421897d0, -6.595821187876013d0) &
    /)
    ! mode = "SR"
    expected(4, :) = (/ &
      (-7.883876589401881d0, 4.199144433240658d0), &
      (-5.13826124195435d0, 7.5009013739201595d0), &
      (-1.8535519260158175d0, -2.366486711099991d0), &
      (-1.155255449510177d0, -0.035423895485983105) &
    /)
    ! mode = "LI"
    expected(5, :) = (/ &
      (-7.883876589401901d0, 4.199144433240657d0), &
      (-5.138261241954358d0, 7.500901373920169d0), &
      (0.7986174799734265d0, 3.169801654108291d0), &
      (2.9903908172888825d0, 0.9764506866571268d0) &
    /)
    ! mode = "SI"
    expected(6, :) = (/ &
      (-1.8535519260158189d0, -2.3664867110999865d0), &
      (-1.155255449510176d0, -0.03542389548598286d0), &
      (0.31046578943724584d0, -4.047463930579591d0), &
      (5.2400515042189735d0, -6.595821187875999d0) &
    /)

    do i = 1, size(which_to_test)
      which_eigenvalues = which_to_test(i)
      write(*, *) " - Testing '" // adjustl(trim(which_eigenvalues)) // "' eigenvalues"
      call solve_evp(amat, bmat, eigenvals, vl, vr)
      call sort_complex_array(eigenvals)
      ! specify custom tolerance for comparison Python-Fortran (1e-12 is a bit strict)
      custom_tol = 1.0d-10
      if (i == 4) then
        ! slight deviation for mode="SR" but imaginary part still within 1e-8
        custom_tol = 1.0d-8
      end if
      @assertEqual(expected(i, :), eigenvals, tolerance=custom_tol)
      ! manual deallocation of residual_norm since we're still in the same test
      call solvers_clean()
    end do
  end subroutine test_arpack_standard


  @test
  subroutine test_arpack_general
    use mod_solvers, only: solvers_clean

    real(dp)  :: custom_tol
    integer   :: i

    write(*, *) "Testing ARPACK: Ax = wBx"
    arpack_mode = "general"
    amat = reshape( &
      (/ &
         1*ir, 2*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir, &
         2*ic, 1*ic, -1*ir,  0*ir,  0*ir,  0*ir,  0*ir,  2*ic,  0*ir,  0*ir, &
        -3*ir, 3*ir, -2*ic, -1*ic,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir, &
         0*ir, 5*ic,  4*ir, -3*ic, -1*ic,  2*ic,  0*ir,  0*ir,  0*ir,  0*ir, &
         1*ir, 0*ir,  2*ir,  2*ic,  3*ic, -7*ir,  1*ic, -3*ir,  0*ir,  0*ir, &
         0*ir, 0*ir,  3*ic,  4*ir,  5*ic, -3*ir, -1*ir, -5*ic,  2*ic,  0*ir, &
         0*ir, 0*ir,  0*ir,  3*ir, -5*ir, -1*ic,  4*ic,  7*ic,  2*ir,  1*ic, &
         0*ir, 0*ir,  0*ir,  0*ir,  6*ic,  0*ir, -7*ir, -3*ir,  1*ic, -2*ir, &
        -1*ir, 0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  1*ir, -3*ir,  5*ic, &
         0*ir, 0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  2*ic,  5*ir  &
      /), &
      shape(amat) &
    )
    ! this matrix is symmetric and positive definite, as it should be
    bmat = reshape( &
      (/ &
        9.0d0,  2.0d0,  8.0d0,  1.0d0,  2.0d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        2.0d0, 23.0d0, -4.0d0, -5.5d0,-10.0d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        8.0d0, -4.0d0, 15.0d0, -9.5d0, -3.0d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        1.0d0, -5.5d0, -9.5d0,60.25d0, -9.5d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        2.0d0,-10.0d0, -3.0d0, -9.5d0, 51.0d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0, 18.0d0, 11.0d0, 27.0d0, 4.0d0, 0.0d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0, 11.0d0, 14.0d0, 13.0d0, 3.0d0, 0.0d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0, 27.0d0, 13.0d0, 51.0d0, 5.5d0, 1.0d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0,  4.0d0,  3.0d0,  5.5d0,2.25d0, 3.5d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0,  1.0d0, 3.5d0, 10.0d0 &
      /), &
      shape(bmat) &
    )
    ! fill expected values, all solutions are obtained through scipy.sparse.linalg.eigs
    ! mode = "LM"
    expected(1, :) = (/ &
      (-47.2665629010241d0, -53.44467400017329d0), &
      (-2.189909116110393d0, 2.5207526151739104d0), &
      (0.27674478315351964d0, -0.05805107198127579d0), &
      (3.255610316647699d0, -1.7224326867994835d0) &
    /)
    ! mode = "SM"
    expected(2, :) = (/ &
      (-0.1090874990971426d0, 0.07259700665954608d0), &
      (-0.09731865560338829d0, -0.07865430786985059d0), &
      (0.005806290449585147d0, -0.00571678567700864d0), &
      (0.09148540813167974d0, -0.09425266599250161d0) &
    /)
    ! mode = "LR"
    expected(3, :) = (/ &
      (0.09148540813169981d0, -0.09425266599249923d0), &
      (0.18564017432800176d0, -0.018108179117325113d0), &
      (0.2767447831535259d0, -0.05805107198128537d0), &
      (3.2556103166476946d0, -1.7224326867994848d0) &
    /)
    ! mode = "SR"
    expected(4, :) = (/ &
      (-47.26656290102423d0, -53.44467400017332d0), &
      (-2.1899091161103916d0, 2.5207526151739206d0), &
      (-0.10908749909714037d0, 0.07259700665954676d0), &
      (-0.09731865560338862d0, -0.07865430786985349d0) &
    /)
    ! mode = "LI"
    expected(5, :) = (/ &
      (-2.18990911611039d0, 2.5207526151739192d0),&
      (-0.10908749909713217d0, 0.07259700665954318d0), &
      (0.005806290449592661d0, -0.0057167856770139625d0), &
      (0.07082410204964182d0, 0.17332751670248298d0) &
    /)
    ! mode = "SI"
    expected(6, :) = (/ &
      (-47.26656290102416d0, -53.44467400017327d0), &
      (-0.09731865560338793d0, -0.07865430786985747d0), &
      (0.0914854081317005d0, -0.09425266599247786d0), &
      (3.255610316647708d0, -1.7224326867994837d0) &
    /)

    do i = 1, size(which_to_test)
      which_eigenvalues = which_to_test(i)
      write(*, *) " - Testing '" // adjustl(trim(which_eigenvalues)) // "' eigenvalues"
      call solve_evp(amat, bmat, eigenvals, vl, vr)
      call sort_complex_array(eigenvals)
      custom_tol = 1.0d-10
      @assertEqual(expected(i, :), eigenvals, tolerance=custom_tol)
      call solvers_clean()
    end do
  end subroutine test_arpack_general


  @test
  subroutine test_arpack_shift_BI_01()
    use mod_global_variables, only: sigma
    use mod_solvers, only: solvers_clean

    real(dp)  :: custom_tol
    integer   :: i

    write(*, *) "Testing ARPACK: Ax = wx, shift-invert with sigma = 0.24 + 0.03i"
    arpack_mode = "shift-invert"
    amat = reshape( &
      (/ &
        1*ir, 2*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir, &
        2*ic, 1*ic, -1*ir,  0*ir,  0*ir,  0*ir,  0*ir,  2*ic,  0*ir,  0*ir, &
       -3*ir, 3*ir, -2*ic, -1*ic,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir, &
        0*ir, 5*ic,  4*ir, -3*ic, -1*ic,  2*ic,  0*ir,  0*ir,  0*ir,  0*ir, &
        1*ir, 0*ir,  2*ir,  2*ic,  3*ic, -7*ir,  1*ic, -3*ir,  0*ir,  0*ir, &
        0*ir, 0*ir,  3*ic,  4*ir,  5*ic, -3*ir, -1*ir, -5*ic,  2*ic,  0*ir, &
        0*ir, 0*ir,  0*ir,  3*ir, -5*ir, -1*ic,  4*ic,  7*ic,  2*ir,  1*ic, &
        0*ir, 0*ir,  0*ir,  0*ir,  6*ic,  0*ir, -7*ir, -3*ir,  1*ic, -2*ir, &
       -1*ir, 0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  1*ir, -3*ir,  5*ic, &
        0*ir, 0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  2*ic,  5*ir &
      /), &
      shape(amat) &
    )
    call create_identity_matrix(ndim=10, mat=bmat)
    sigma = (0.24d0, 0.03d0)

    ! mode = "LM"
    expected(1, :) = (/ &
      (-1.853551926015413d0, -2.366486711100192d0), &
      (-1.1552554495101215d0, -0.03542389548588121d0), &
      (0.24267531391652092d0, 0.030734082150197198d0), &
      (2.9903908172890867d0, 0.9764506866571027d0) &
    /)
    ! mode = "SM"
    expected(2, :) = (/ &
      (-7.883876589401371d0, 4.199144433240351d0), &
      (-5.138261241954801d0, 7.500901373920157d0), &
      (0.31046578943771874d0, -4.047463930578823d0), &
      (5.24005150421878d0, -6.595821187876008d0) &
    /)
    ! mode = "LR"
    expected(3, :) = (/ &
      (0.24267531391652092d0, 0.030734082150197198d0), &
      (2.990390817289029d0, 0.9764506866570226d0), &
      (3.4487443020468165d0, 0.16816349496506794d0), &
      (5.2400515042185285d0, -6.595821187875602d0) &
    /)
    ! mode = "SR"
    expected(4, :) = (/ &
      (-7.883876589402327d0, 4.199144433240567d0), &
      (-5.138261241954655d0, 7.500901373920244d0), &
      (-1.8535519260159765d0, -2.36648671109967d0), &
      (-1.1552554495100638d0, -0.03542389548596607d0) &
    /)
    ! mode = "LI"
    expected(5, :) = (/ &
      (-1.8535519260157602d0, -2.3664867110998675d0), &
      (-1.1552554495100895d0, -0.035423895485844265d0), &
      (0.3104657894374221d0, -4.047463930579946d0), &
      (5.240051504220009d0, -6.595821187876579d0) &
    /)
    ! mode = "SI"
    expected(6, :) = (/ &
      (-5.138261241954228d0, 7.500901373920417d0), &
      (0.24267531391652092d0, 0.030734082150197198d0), &
      (0.7986174799733904d0, 3.169801654108359d0), &
      (2.990390817289118d0, 0.9764506866573013d0) &
    /)

    do i = 1, size(which_to_test)
      which_eigenvalues = which_to_test(i)
      write(*, *) " - Testing '" // adjustl(trim(which_eigenvalues)) // "' eigenvalues"
      call solve_evp(amat, bmat, eigenvals, vl, vr)
      call sort_complex_array(eigenvals)
      custom_tol = 1.0d-10
      @assertEqual(expected(i, :), eigenvals, tolerance=custom_tol)
      call solvers_clean()
    end do
  end subroutine test_arpack_shift_BI_01


  @test
  subroutine test_arpack_shift_BI_02()
    use mod_global_variables, only: sigma
    use mod_solvers, only: solvers_clean

    real(dp)  :: custom_tol
    integer   :: i

    write(*, *) "Testing ARPACK: Ax = wx, shift-invert with sigma = 3.44 + 0.17i"
    arpack_mode = "shift-invert"
    amat = reshape( &
      (/ &
        1*ir, 2*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir, &
        2*ic, 1*ic, -1*ir,  0*ir,  0*ir,  0*ir,  0*ir,  2*ic,  0*ir,  0*ir, &
       -3*ir, 3*ir, -2*ic, -1*ic,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir, &
        0*ir, 5*ic,  4*ir, -3*ic, -1*ic,  2*ic,  0*ir,  0*ir,  0*ir,  0*ir, &
        1*ir, 0*ir,  2*ir,  2*ic,  3*ic, -7*ir,  1*ic, -3*ir,  0*ir,  0*ir, &
        0*ir, 0*ir,  3*ic,  4*ir,  5*ic, -3*ir, -1*ir, -5*ic,  2*ic,  0*ir, &
        0*ir, 0*ir,  0*ir,  3*ir, -5*ir, -1*ic,  4*ic,  7*ic,  2*ir,  1*ic, &
        0*ir, 0*ir,  0*ir,  0*ir,  6*ic,  0*ir, -7*ir, -3*ir,  1*ic, -2*ir, &
       -1*ir, 0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  1*ir, -3*ir,  5*ic, &
        0*ir, 0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  2*ic,  5*ir &
      /), &
      shape(amat) &
    )
    call create_identity_matrix(ndim=10, mat=bmat)
    sigma = (3.44d0, 0.17d0)
    ! mode = "LM"
    expected(1, :) = (/ &
      (0.24267531391652092d0, 0.030734082150197198d0), &
      (0.7986174799734255d0, 3.1698016541082983d0), &
      (2.9903908172888913d0, 0.976450686657134d0), &
      (3.4487443020471775d0, 0.1681634949651187d0) &
    /)
    ! mode = "SM"
    expected(2, :) = (/ &
      (-7.883876589401886d0, 4.199144433240666d0), &
      (-5.138261241954359d0, 7.500901373920177d0), &
      (-1.853551926015817d0, -2.3664867110999896d0), &
      (5.240051504218989d0, -6.595821187876025d0) &
    /)
    ! mode = "LR"
    expected(3, :) = (/ &
      (-7.883876589401886d0, 4.199144433240666d0), &
      (-5.138261241954359d0, 7.500901373920177d0), &
      (3.4487443020471775d0, 0.1681634949651187d0), &
      (5.240051504218989d0, -6.595821187876025d0) &
    /)
    ! mode = "SR"
    expected(4, :) = (/ &
      (-1.1552554495101748d0, -0.035423895485982224d0), &
      (0.24267531391651967d0, 0.030734082150193527d0), &
      (0.7986174799734255d0, 3.1698016541082983d0), &
      (2.9903908172888913d0, 0.976450686657134d0) &
    /)
    ! mode = "LI"
    expected(5, :) = (/ &
      (-1.853551926015817d0, -2.3664867110999896d0), &
      (0.31046578943724384d0, -4.047463930579587d0), &
      (3.4487443020471775d0, 0.1681634949651187d0), &
      (5.240051504218989d0, -6.595821187876025d0) &
    /)
    ! mode = "SI"
    expected(6, :) = (/ &
      (-7.883876589401886d0, 4.199144433240666d0), &
      (-5.138261241954359d0, 7.500901373920177d0), &
      (0.7986174799734255d0, 3.1698016541082983d0), &
      (2.9903908172888913d0, 0.976450686657134d0) &
    /)

    do i = 1, size(which_to_test)
      which_eigenvalues = which_to_test(i)
      write(*, *) " - Testing '" // adjustl(trim(which_eigenvalues)) // "' eigenvalues"
      call solve_evp(amat, bmat, eigenvals, vl, vr)
      call sort_complex_array(eigenvals)
      custom_tol = 1.0d-10
      @assertEqual(expected(i, :), eigenvals, tolerance=custom_tol)
      call solvers_clean()
    end do
  end subroutine test_arpack_shift_BI_02


  @test
  subroutine test_arpack_shift_BG_01
    use mod_global_variables, only: sigma
    use mod_solvers, only: solvers_clean

    real(dp)  :: custom_tol
    integer   :: i

    write(*, *) "Testing ARPACK: Ax = wBx, shift-invert with sigma = 0.09 - 0.1i"
    arpack_mode = "shift-invert"
    amat = reshape( &
      (/ &
        1*ir, 2*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir, &
        2*ic, 1*ic, -1*ir,  0*ir,  0*ir,  0*ir,  0*ir,  2*ic,  0*ir,  0*ir, &
       -3*ir, 3*ir, -2*ic, -1*ic,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir, &
        0*ir, 5*ic,  4*ir, -3*ic, -1*ic,  2*ic,  0*ir,  0*ir,  0*ir,  0*ir, &
        1*ir, 0*ir,  2*ir,  2*ic,  3*ic, -7*ir,  1*ic, -3*ir,  0*ir,  0*ir, &
        0*ir, 0*ir,  3*ic,  4*ir,  5*ic, -3*ir, -1*ir, -5*ic,  2*ic,  0*ir, &
        0*ir, 0*ir,  0*ir,  3*ir, -5*ir, -1*ic,  4*ic,  7*ic,  2*ir,  1*ic, &
        0*ir, 0*ir,  0*ir,  0*ir,  6*ic,  0*ir, -7*ir, -3*ir,  1*ic, -2*ir, &
       -1*ir, 0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  1*ir, -3*ir,  5*ic, &
        0*ir, 0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  0*ir,  2*ic,  5*ir  &
      /), &
      shape(amat) &
    )
    ! this matrix is symmetric and positive definite, as it should be
    bmat = reshape( &
      (/ &
        9.0d0,  2.0d0,  8.0d0,  1.0d0,  2.0d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        2.0d0, 23.0d0, -4.0d0, -5.5d0,-10.0d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        8.0d0, -4.0d0, 15.0d0, -9.5d0, -3.0d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        1.0d0, -5.5d0, -9.5d0,60.25d0, -9.5d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        2.0d0,-10.0d0, -3.0d0, -9.5d0, 51.0d0,  0.0d0,  0.0d0,  0.0d0, 0.0d0, 0.0d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0, 18.0d0, 11.0d0, 27.0d0, 4.0d0, 0.0d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0, 11.0d0, 14.0d0, 13.0d0, 3.0d0, 0.0d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0, 27.0d0, 13.0d0, 51.0d0, 5.5d0, 1.0d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0,  4.0d0,  3.0d0,  5.5d0,2.25d0, 3.5d0, &
        0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0,  0.0d0,  1.0d0, 3.5d0, 10.0d0 &
      /), &
      shape(bmat) &
    )
    sigma = (0.09d0, -0.1d0)
    ! fill expected values, all solutions are obtained through scipy.sparse.linalg.eigs
    ! mode = "LM"
    expected(1, :) = (/ &
      (-0.09731865560338887d0, -0.07865430786985353d0), &
      (0.0058062904495826545d0, -0.005716785677010297d0), &
      (0.09148540813168911d0, -0.09425266599249026d0), &
      (0.18564017432800461d0, -0.018108179117324513d0) &
    /)
    ! mode = "SM"
    expected(2, :) = (/ &
      (-47.26656290102486d0, -53.44467400017213d0), &
      (-2.1899091161104165d0, 2.520752615173916d0), &
      (0.07082410204964547d0, 0.17332751670247556d0), &
      (3.2556103166477097d0, -1.7224326867994855d0) &
    /)
    ! mode = "LR"
    expected(3, :) = (/ &
      (0.09148540813168911d0, -0.09425266599249026d0), &
      (0.18564017432800534d0, -0.018108179117324014d0), &
      (0.2767447831535203d0, -0.05805107198128745d0), &
      (3.2556103166477355d0, -1.7224326867994992d0) &
    /)
    ! mode = "SR"
    expected(4, :) = (/ &
      (-0.10908749909714033d0, 0.07259700665954469d0), &
      (-0.09731865560338906d0, -0.07865430786985293d0), &
      (0.005806290449583071d0, -0.005716785677010505d0), &
      (0.07082410204964544d0, 0.17332751670247468d0) &
    /)
    ! mode = "LI"
    expected(5, :) = (/ &
      (-47.26656290102403d0, -53.44467400017297d0), &
      (-2.189909116110398d0, 2.5207526151739064d0), &
      (-0.09731865560338962d0, -0.07865430786985281d0), &
      (3.2556103166477004d0, -1.7224326867994795d0) &
    /)
    ! mode = "SI"
    expected(6, :) = (/ &
      (0.005806290449582419d0, -0.005716785677010408d0), &
      (0.07082410204964595d0, 0.17332751670247412d0), &
      (0.09148540813168911d0, -0.09425266599249026d0), &
      (0.1856401743280045d0, -0.018108179117324832d0) &
    /)

    do i = 1, size(which_to_test)
      which_eigenvalues = which_to_test(i)
      write(*, *) " - Testing '" // adjustl(trim(which_eigenvalues)) // "' eigenvalues"
      call solve_evp(amat, bmat, eigenvals, vl, vr)
      call sort_complex_array(eigenvals)
      custom_tol = 1.0d-10
      @assertEqual(expected(i, :), eigenvals, tolerance=custom_tol)
      call solvers_clean()
    end do
  end subroutine test_arpack_shift_BG_01

end module mod_test_arpacksolvers
